// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/account_manager.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of private compute contract
type GasAccountFunction int32

const (
	// set admin
	GasAccountFunction_SET_ADMIN GasAccountFunction = 0
	// get admin
	GasAccountFunction_GET_ADMIN GasAccountFunction = 1
	// recharge gas
	GasAccountFunction_RECHARGE_GAS GasAccountFunction = 2
	// get balance
	GasAccountFunction_GET_BALANCE GasAccountFunction = 3
	// charge gas
	GasAccountFunction_CHARGE_GAS GasAccountFunction = 4
	// frozen account
	GasAccountFunction_FROZEN_ACCOUNT GasAccountFunction = 5
	// unfrozen account
	GasAccountFunction_UNFROZEN_ACCOUNT GasAccountFunction = 6
	// account status
	GasAccountFunction_ACCOUNT_STATUS GasAccountFunction = 7
	// refund gas
	GasAccountFunction_REFUND_GAS GasAccountFunction = 8
	// refund gas for vm
	GasAccountFunction_REFUND_GAS_VM GasAccountFunction = 9
	// charge gas for multi accounts
	GasAccountFunction_CHARGE_GAS_FOR_MULTI_ACCOUNT GasAccountFunction = 10
	// set payer for contract's method
	GasAccountFunction_SET_CONTRACT_METHOD_PAYER GasAccountFunction = 11
	// clear payer for contract's method
	GasAccountFunction_UNSET_CONTRACT_METHOD_PAYER GasAccountFunction = 12
	// get payer for contract's method
	GasAccountFunction_GET_CONTRACT_METHOD_PAYER GasAccountFunction = 13
	// gey payer of tx
	GasAccountFunction_GET_TX_PAYER GasAccountFunction = 14
)

var GasAccountFunction_name = map[int32]string{
	0:  "SET_ADMIN",
	1:  "GET_ADMIN",
	2:  "RECHARGE_GAS",
	3:  "GET_BALANCE",
	4:  "CHARGE_GAS",
	5:  "FROZEN_ACCOUNT",
	6:  "UNFROZEN_ACCOUNT",
	7:  "ACCOUNT_STATUS",
	8:  "REFUND_GAS",
	9:  "REFUND_GAS_VM",
	10: "CHARGE_GAS_FOR_MULTI_ACCOUNT",
	11: "SET_CONTRACT_METHOD_PAYER",
	12: "UNSET_CONTRACT_METHOD_PAYER",
	13: "GET_CONTRACT_METHOD_PAYER",
	14: "GET_TX_PAYER",
}

var GasAccountFunction_value = map[string]int32{
	"SET_ADMIN":                    0,
	"GET_ADMIN":                    1,
	"RECHARGE_GAS":                 2,
	"GET_BALANCE":                  3,
	"CHARGE_GAS":                   4,
	"FROZEN_ACCOUNT":               5,
	"UNFROZEN_ACCOUNT":             6,
	"ACCOUNT_STATUS":               7,
	"REFUND_GAS":                   8,
	"REFUND_GAS_VM":                9,
	"CHARGE_GAS_FOR_MULTI_ACCOUNT": 10,
	"SET_CONTRACT_METHOD_PAYER":    11,
	"UNSET_CONTRACT_METHOD_PAYER":  12,
	"GET_CONTRACT_METHOD_PAYER":    13,
	"GET_TX_PAYER":                 14,
}

func (x GasAccountFunction) String() string {
	return proto.EnumName(GasAccountFunction_name, int32(x))
}

func (GasAccountFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{0}
}

type SetContractMethodPayer_Parameter int32

const (
	SetContractMethodPayer_ENDORSEMENT SetContractMethodPayer_Parameter = 0
	SetContractMethodPayer_PARAMS      SetContractMethodPayer_Parameter = 1
)

var SetContractMethodPayer_Parameter_name = map[int32]string{
	0: "ENDORSEMENT",
	1: "PARAMS",
}

var SetContractMethodPayer_Parameter_value = map[string]int32{
	"ENDORSEMENT": 0,
	"PARAMS":      1,
}

func (x SetContractMethodPayer_Parameter) String() string {
	return proto.EnumName(SetContractMethodPayer_Parameter_name, int32(x))
}

func (SetContractMethodPayer_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{5, 0}
}

type UnsetContractMethodPayer_Parameter int32

const (
	UnsetContractMethodPayer_CONTRACT_NAME UnsetContractMethodPayer_Parameter = 0
	UnsetContractMethodPayer_METHOD        UnsetContractMethodPayer_Parameter = 1
)

var UnsetContractMethodPayer_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
	1: "METHOD",
}

var UnsetContractMethodPayer_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
	"METHOD":        1,
}

func (x UnsetContractMethodPayer_Parameter) String() string {
	return proto.EnumName(UnsetContractMethodPayer_Parameter_name, int32(x))
}

func (UnsetContractMethodPayer_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{6, 0}
}

type GetContractMethodPayer_Parameter int32

const (
	GetContractMethodPayer_CONTRACT_NAME GetContractMethodPayer_Parameter = 0
	GetContractMethodPayer_METHOD        GetContractMethodPayer_Parameter = 1
)

var GetContractMethodPayer_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
	1: "METHOD",
}

var GetContractMethodPayer_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
	"METHOD":        1,
}

func (x GetContractMethodPayer_Parameter) String() string {
	return proto.EnumName(GetContractMethodPayer_Parameter_name, int32(x))
}

func (GetContractMethodPayer_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{7, 0}
}

type GetTxPayer_Parameter int32

const (
	GetTxPayer_TX_ID GetTxPayer_Parameter = 0
)

var GetTxPayer_Parameter_name = map[int32]string{
	0: "TX_ID",
}

var GetTxPayer_Parameter_value = map[string]int32{
	"TX_ID": 0,
}

func (x GetTxPayer_Parameter) String() string {
	return proto.EnumName(GetTxPayer_Parameter_name, int32(x))
}

func (GetTxPayer_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{8, 0}
}

type AccountMultiSign struct {
	Payloads      []byte `protobuf:"bytes,1,opt,name=payloads,proto3" json:"payloads,omitempty"`
	ClientSign    []byte `protobuf:"bytes,2,opt,name=client_sign,json=clientSign,proto3" json:"client_sign,omitempty"`
	PublicKeyInfo []byte `protobuf:"bytes,3,opt,name=public_key_info,json=publicKeyInfo,proto3" json:"public_key_info,omitempty"`
}

func (m *AccountMultiSign) Reset()         { *m = AccountMultiSign{} }
func (m *AccountMultiSign) String() string { return proto.CompactTextString(m) }
func (*AccountMultiSign) ProtoMessage()    {}
func (*AccountMultiSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{0}
}
func (m *AccountMultiSign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMultiSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMultiSign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMultiSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMultiSign.Merge(m, src)
}
func (m *AccountMultiSign) XXX_Size() int {
	return m.Size()
}
func (m *AccountMultiSign) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMultiSign.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMultiSign proto.InternalMessageInfo

func (m *AccountMultiSign) GetPayloads() []byte {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *AccountMultiSign) GetClientSign() []byte {
	if m != nil {
		return m.ClientSign
	}
	return nil
}

func (m *AccountMultiSign) GetPublicKeyInfo() []byte {
	if m != nil {
		return m.PublicKeyInfo
	}
	return nil
}

// account multi sign req
type AccountMultiSignsReq struct {
	GasMultiSigns []*AccountMultiSign `protobuf:"bytes,1,rep,name=gas_multi_signs,json=gasMultiSigns,proto3" json:"gas_multi_signs,omitempty"`
}

func (m *AccountMultiSignsReq) Reset()         { *m = AccountMultiSignsReq{} }
func (m *AccountMultiSignsReq) String() string { return proto.CompactTextString(m) }
func (*AccountMultiSignsReq) ProtoMessage()    {}
func (*AccountMultiSignsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{1}
}
func (m *AccountMultiSignsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMultiSignsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMultiSignsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMultiSignsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMultiSignsReq.Merge(m, src)
}
func (m *AccountMultiSignsReq) XXX_Size() int {
	return m.Size()
}
func (m *AccountMultiSignsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMultiSignsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMultiSignsReq proto.InternalMessageInfo

func (m *AccountMultiSignsReq) GetGasMultiSigns() []*AccountMultiSign {
	if m != nil {
		return m.GasMultiSigns
	}
	return nil
}

type RechargeGas struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	GasAmount int64  `protobuf:"varint,2,opt,name=gas_amount,json=gasAmount,proto3" json:"gas_amount,omitempty"`
}

func (m *RechargeGas) Reset()         { *m = RechargeGas{} }
func (m *RechargeGas) String() string { return proto.CompactTextString(m) }
func (*RechargeGas) ProtoMessage()    {}
func (*RechargeGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{2}
}
func (m *RechargeGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeGas.Merge(m, src)
}
func (m *RechargeGas) XXX_Size() int {
	return m.Size()
}
func (m *RechargeGas) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeGas.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeGas proto.InternalMessageInfo

func (m *RechargeGas) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RechargeGas) GetGasAmount() int64 {
	if m != nil {
		return m.GasAmount
	}
	return 0
}

type RechargeGasReq struct {
	BatchRechargeGas []*RechargeGas `protobuf:"bytes,1,rep,name=batch_recharge_gas,json=batchRechargeGas,proto3" json:"batch_recharge_gas,omitempty"`
}

func (m *RechargeGasReq) Reset()         { *m = RechargeGasReq{} }
func (m *RechargeGasReq) String() string { return proto.CompactTextString(m) }
func (*RechargeGasReq) ProtoMessage()    {}
func (*RechargeGasReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{3}
}
func (m *RechargeGasReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeGasReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeGasReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeGasReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeGasReq.Merge(m, src)
}
func (m *RechargeGasReq) XXX_Size() int {
	return m.Size()
}
func (m *RechargeGasReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeGasReq.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeGasReq proto.InternalMessageInfo

func (m *RechargeGasReq) GetBatchRechargeGas() []*RechargeGas {
	if m != nil {
		return m.BatchRechargeGas
	}
	return nil
}

type SetContractMethodPayerParams struct {
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	Method       string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	PayerAddress string `protobuf:"bytes,3,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	RequestId    string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *SetContractMethodPayerParams) Reset()         { *m = SetContractMethodPayerParams{} }
func (m *SetContractMethodPayerParams) String() string { return proto.CompactTextString(m) }
func (*SetContractMethodPayerParams) ProtoMessage()    {}
func (*SetContractMethodPayerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{4}
}
func (m *SetContractMethodPayerParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetContractMethodPayerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetContractMethodPayerParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetContractMethodPayerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetContractMethodPayerParams.Merge(m, src)
}
func (m *SetContractMethodPayerParams) XXX_Size() int {
	return m.Size()
}
func (m *SetContractMethodPayerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SetContractMethodPayerParams.DiscardUnknown(m)
}

var xxx_messageInfo_SetContractMethodPayerParams proto.InternalMessageInfo

func (m *SetContractMethodPayerParams) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *SetContractMethodPayerParams) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *SetContractMethodPayerParams) GetPayerAddress() string {
	if m != nil {
		return m.PayerAddress
	}
	return ""
}

func (m *SetContractMethodPayerParams) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// params keys for native call
type SetContractMethodPayer struct {
}

func (m *SetContractMethodPayer) Reset()         { *m = SetContractMethodPayer{} }
func (m *SetContractMethodPayer) String() string { return proto.CompactTextString(m) }
func (*SetContractMethodPayer) ProtoMessage()    {}
func (*SetContractMethodPayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{5}
}
func (m *SetContractMethodPayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetContractMethodPayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetContractMethodPayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetContractMethodPayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetContractMethodPayer.Merge(m, src)
}
func (m *SetContractMethodPayer) XXX_Size() int {
	return m.Size()
}
func (m *SetContractMethodPayer) XXX_DiscardUnknown() {
	xxx_messageInfo_SetContractMethodPayer.DiscardUnknown(m)
}

var xxx_messageInfo_SetContractMethodPayer proto.InternalMessageInfo

// params for native call
type UnsetContractMethodPayer struct {
}

func (m *UnsetContractMethodPayer) Reset()         { *m = UnsetContractMethodPayer{} }
func (m *UnsetContractMethodPayer) String() string { return proto.CompactTextString(m) }
func (*UnsetContractMethodPayer) ProtoMessage()    {}
func (*UnsetContractMethodPayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{6}
}
func (m *UnsetContractMethodPayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsetContractMethodPayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsetContractMethodPayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsetContractMethodPayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsetContractMethodPayer.Merge(m, src)
}
func (m *UnsetContractMethodPayer) XXX_Size() int {
	return m.Size()
}
func (m *UnsetContractMethodPayer) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsetContractMethodPayer.DiscardUnknown(m)
}

var xxx_messageInfo_UnsetContractMethodPayer proto.InternalMessageInfo

// params for native call
type GetContractMethodPayer struct {
}

func (m *GetContractMethodPayer) Reset()         { *m = GetContractMethodPayer{} }
func (m *GetContractMethodPayer) String() string { return proto.CompactTextString(m) }
func (*GetContractMethodPayer) ProtoMessage()    {}
func (*GetContractMethodPayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{7}
}
func (m *GetContractMethodPayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContractMethodPayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContractMethodPayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContractMethodPayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContractMethodPayer.Merge(m, src)
}
func (m *GetContractMethodPayer) XXX_Size() int {
	return m.Size()
}
func (m *GetContractMethodPayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContractMethodPayer.DiscardUnknown(m)
}

var xxx_messageInfo_GetContractMethodPayer proto.InternalMessageInfo

// params for native call
type GetTxPayer struct {
}

func (m *GetTxPayer) Reset()         { *m = GetTxPayer{} }
func (m *GetTxPayer) String() string { return proto.CompactTextString(m) }
func (*GetTxPayer) ProtoMessage()    {}
func (*GetTxPayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_816aa64736f82c70, []int{8}
}
func (m *GetTxPayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxPayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxPayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxPayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxPayer.Merge(m, src)
}
func (m *GetTxPayer) XXX_Size() int {
	return m.Size()
}
func (m *GetTxPayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxPayer.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxPayer proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("syscontract.GasAccountFunction", GasAccountFunction_name, GasAccountFunction_value)
	proto.RegisterEnum("syscontract.SetContractMethodPayer_Parameter", SetContractMethodPayer_Parameter_name, SetContractMethodPayer_Parameter_value)
	proto.RegisterEnum("syscontract.UnsetContractMethodPayer_Parameter", UnsetContractMethodPayer_Parameter_name, UnsetContractMethodPayer_Parameter_value)
	proto.RegisterEnum("syscontract.GetContractMethodPayer_Parameter", GetContractMethodPayer_Parameter_name, GetContractMethodPayer_Parameter_value)
	proto.RegisterEnum("syscontract.GetTxPayer_Parameter", GetTxPayer_Parameter_name, GetTxPayer_Parameter_value)
	proto.RegisterType((*AccountMultiSign)(nil), "syscontract.AccountMultiSign")
	proto.RegisterType((*AccountMultiSignsReq)(nil), "syscontract.AccountMultiSignsReq")
	proto.RegisterType((*RechargeGas)(nil), "syscontract.RechargeGas")
	proto.RegisterType((*RechargeGasReq)(nil), "syscontract.RechargeGasReq")
	proto.RegisterType((*SetContractMethodPayerParams)(nil), "syscontract.SetContractMethodPayerParams")
	proto.RegisterType((*SetContractMethodPayer)(nil), "syscontract.SetContractMethodPayer")
	proto.RegisterType((*UnsetContractMethodPayer)(nil), "syscontract.UnsetContractMethodPayer")
	proto.RegisterType((*GetContractMethodPayer)(nil), "syscontract.GetContractMethodPayer")
	proto.RegisterType((*GetTxPayer)(nil), "syscontract.GetTxPayer")
}

func init() { proto.RegisterFile("syscontract/account_manager.proto", fileDescriptor_816aa64736f82c70) }

var fileDescriptor_816aa64736f82c70 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0xe2, 0x46,
	0x18, 0xc5, 0x21, 0x21, 0xf1, 0xc7, 0x4f, 0xdc, 0x51, 0x84, 0x68, 0x1b, 0x48, 0xea, 0x56, 0x55,
	0x14, 0xa9, 0x20, 0xa5, 0x4f, 0xe0, 0x80, 0x71, 0x50, 0x63, 0x83, 0xc6, 0xa6, 0x4a, 0x23, 0x55,
	0xa3, 0xc1, 0x4c, 0x8c, 0x15, 0x6c, 0x13, 0xdb, 0xb4, 0xcb, 0x5b, 0xec, 0x1b, 0xec, 0xeb, 0xec,
	0x65, 0x2e, 0x77, 0xef, 0x56, 0xc9, 0x8b, 0xac, 0xc6, 0x36, 0xe0, 0x8d, 0x92, 0xab, 0xbd, 0x3c,
	0x67, 0xce, 0x39, 0xdf, 0xf9, 0x3e, 0x81, 0xe1, 0x97, 0x68, 0x15, 0xd9, 0x81, 0x1f, 0x87, 0xd4,
	0x8e, 0x3b, 0xd4, 0xb6, 0x83, 0xa5, 0x1f, 0x13, 0x8f, 0xfa, 0xd4, 0x61, 0x61, 0x7b, 0x11, 0x06,
	0x71, 0x80, 0xca, 0x39, 0x89, 0xfc, 0x3f, 0x48, 0x4a, 0xaa, 0xd2, 0x97, 0xf3, 0xd8, 0x35, 0x5d,
	0xc7, 0x47, 0x3f, 0xc1, 0xc1, 0x82, 0xae, 0xe6, 0x01, 0x9d, 0x46, 0x0d, 0xe1, 0x54, 0x38, 0xab,
	0xe0, 0x0d, 0x46, 0x27, 0x50, 0xb6, 0xe7, 0x2e, 0xf3, 0x63, 0x12, 0xb9, 0x8e, 0xdf, 0xd8, 0x49,
	0x9e, 0x21, 0xa5, 0x12, 0xf3, 0xef, 0x70, 0xb8, 0x58, 0x4e, 0xe6, 0xae, 0x4d, 0xee, 0xd9, 0x8a,
	0xb8, 0xfe, 0x5d, 0xd0, 0x28, 0x26, 0xa2, 0x6a, 0x4a, 0xff, 0xc5, 0x56, 0x03, 0xff, 0x2e, 0x90,
	0xff, 0x85, 0xa3, 0x97, 0x83, 0x23, 0xcc, 0x1e, 0x90, 0x0a, 0x87, 0x0e, 0x8d, 0x88, 0xc7, 0xc9,
	0x64, 0x06, 0xef, 0x50, 0x3c, 0x2b, 0x5f, 0x34, 0xdb, 0xb9, 0xde, 0xed, 0x97, 0x5e, 0x5c, 0x75,
	0x68, 0xb4, 0x4d, 0x92, 0xfb, 0x50, 0xc6, 0xcc, 0x9e, 0xd1, 0xd0, 0x61, 0x1a, 0x8d, 0x50, 0x03,
	0xf6, 0xe9, 0x74, 0x1a, 0xb2, 0x28, 0xdd, 0x48, 0xc4, 0x6b, 0x88, 0x9a, 0x00, 0x7c, 0x1e, 0xf5,
	0x78, 0x5c, 0xb2, 0x4f, 0x11, 0x8b, 0x0e, 0x8d, 0x94, 0x84, 0x90, 0x6f, 0xa0, 0x96, 0xcb, 0xe1,
	0x05, 0xfb, 0x80, 0x26, 0x34, 0xb6, 0x67, 0x24, 0xcc, 0x78, 0xe2, 0xd0, 0x75, 0xc7, 0xc6, 0x37,
	0x1d, 0xf3, 0x46, 0x29, 0xf1, 0xe4, 0x18, 0xf9, 0x83, 0x00, 0xc7, 0x26, 0x8b, 0xbb, 0x99, 0x5a,
	0x67, 0xf1, 0x2c, 0x98, 0x8e, 0xe8, 0x8a, 0x85, 0x23, 0x1a, 0x52, 0x2f, 0x42, 0xbf, 0x42, 0x75,
	0x1d, 0x45, 0x7c, 0xea, 0xb1, 0xac, 0x79, 0x65, 0x4d, 0x1a, 0xd4, 0x63, 0xa8, 0x0e, 0x25, 0x2f,
	0x71, 0x26, 0xd5, 0x45, 0x9c, 0x21, 0x6e, 0x5e, 0xf0, 0x2c, 0xb2, 0x5e, 0xbb, 0x98, 0x9a, 0x13,
	0x52, 0xd9, 0xee, 0x1e, 0xb2, 0x87, 0x25, 0x8b, 0x62, 0xe2, 0x4e, 0x1b, 0xbb, 0x89, 0x42, 0xcc,
	0x98, 0xc1, 0x54, 0xbe, 0x84, 0xfa, 0xeb, 0x05, 0xe5, 0x33, 0x10, 0x93, 0x92, 0x2c, 0x66, 0x21,
	0x3a, 0x84, 0xb2, 0x6a, 0xf4, 0x86, 0xd8, 0x54, 0x75, 0xd5, 0xb0, 0xa4, 0x02, 0x02, 0x28, 0x8d,
	0x14, 0xac, 0xe8, 0xa6, 0x24, 0xc8, 0x7d, 0x68, 0x8c, 0xfd, 0xe8, 0xf5, 0x94, 0xf3, 0x7c, 0xca,
	0x0f, 0x50, 0xed, 0x0e, 0x0d, 0x0b, 0x2b, 0x5d, 0x8b, 0x18, 0x8a, 0xae, 0xa6, 0x39, 0xba, 0x6a,
	0x5d, 0x0d, 0x7b, 0x92, 0x20, 0xf7, 0xa0, 0xae, 0x7d, 0x7f, 0xca, 0x6f, 0x00, 0x1a, 0x8b, 0xad,
	0x77, 0xa9, 0xb3, 0x9e, 0x77, 0x8a, 0xb0, 0x67, 0xdd, 0x90, 0x41, 0x4f, 0x2a, 0x9c, 0x7f, 0xde,
	0x01, 0xa4, 0xd1, 0x28, 0xfb, 0x89, 0xf5, 0x97, 0xbe, 0x1d, 0xbb, 0x81, 0x8f, 0xaa, 0x20, 0x9a,
	0xaa, 0x45, 0x94, 0x9e, 0x3e, 0x30, 0xa4, 0x02, 0x87, 0xda, 0x06, 0x0a, 0x48, 0x82, 0x0a, 0x56,
	0xbb, 0x57, 0x0a, 0xd6, 0x54, 0xa2, 0x29, 0xa6, 0xb4, 0xc3, 0xef, 0xc2, 0x05, 0x97, 0xca, 0xb5,
	0x62, 0x74, 0x55, 0xa9, 0x88, 0x6a, 0x00, 0x39, 0xc1, 0x2e, 0x42, 0x50, 0xeb, 0xe3, 0xe1, 0xad,
	0x6a, 0x10, 0xa5, 0xdb, 0x1d, 0x8e, 0x0d, 0x4b, 0xda, 0x43, 0x47, 0x20, 0x8d, 0x8d, 0x17, 0x6c,
	0x89, 0x2b, 0x33, 0x40, 0x4c, 0x4b, 0xb1, 0xc6, 0xa6, 0xb4, 0xcf, 0xd3, 0xb0, 0xda, 0x1f, 0x1b,
	0xbd, 0x24, 0xed, 0x80, 0xaf, 0xbe, 0xc5, 0xe4, 0x6f, 0x5d, 0x12, 0xd1, 0x29, 0x1c, 0x6f, 0x07,
	0x92, 0xfe, 0x10, 0x13, 0x7d, 0x7c, 0x6d, 0x0d, 0x36, 0xc1, 0x80, 0x9a, 0xf0, 0x23, 0xdf, 0x69,
	0x73, 0xb3, 0xf4, 0x52, 0x64, 0xa4, 0xfc, 0xa3, 0x62, 0xa9, 0x8c, 0x4e, 0xe0, 0xe7, 0xb1, 0xf1,
	0xb6, 0xa0, 0xc2, 0xfd, 0xda, 0x9b, 0xcf, 0x55, 0x7e, 0x14, 0xfe, 0x6c, 0xdd, 0x64, 0x4c, 0xed,
	0xd2, 0xf9, 0xf8, 0xd4, 0x12, 0x1e, 0x9f, 0x5a, 0xc2, 0x97, 0xa7, 0x96, 0xf0, 0xfe, 0xb9, 0x55,
	0x78, 0x7c, 0x6e, 0x15, 0x3e, 0x3d, 0xb7, 0x0a, 0xd0, 0x0c, 0x42, 0xa7, 0x6d, 0xcf, 0xa8, 0xeb,
	0x7b, 0xf4, 0x9e, 0x7f, 0xac, 0x26, 0xf9, 0x3f, 0xd3, 0x6d, 0xfe, 0x29, 0x08, 0x9d, 0xce, 0x16,
	0x76, 0x16, 0x93, 0x3f, 0x9c, 0xa0, 0xf3, 0xdf, 0x45, 0x27, 0xa7, 0x9f, 0x94, 0x92, 0x8f, 0xdd,
	0x9f, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xc8, 0x31, 0x0f, 0x11, 0x05, 0x00, 0x00,
}

func (m *AccountMultiSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMultiSign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMultiSign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeyInfo) > 0 {
		i -= len(m.PublicKeyInfo)
		copy(dAtA[i:], m.PublicKeyInfo)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.PublicKeyInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientSign) > 0 {
		i -= len(m.ClientSign)
		copy(dAtA[i:], m.ClientSign)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.ClientSign)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payloads) > 0 {
		i -= len(m.Payloads)
		copy(dAtA[i:], m.Payloads)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.Payloads)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountMultiSignsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMultiSignsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMultiSignsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasMultiSigns) > 0 {
		for iNdEx := len(m.GasMultiSigns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasMultiSigns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RechargeGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasAmount != 0 {
		i = encodeVarintAccountManager(dAtA, i, uint64(m.GasAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RechargeGasReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeGasReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RechargeGasReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchRechargeGas) > 0 {
		for iNdEx := len(m.BatchRechargeGas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchRechargeGas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetContractMethodPayerParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetContractMethodPayerParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetContractMethodPayerParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PayerAddress) > 0 {
		i -= len(m.PayerAddress)
		copy(dAtA[i:], m.PayerAddress)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.PayerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintAccountManager(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetContractMethodPayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetContractMethodPayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetContractMethodPayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnsetContractMethodPayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsetContractMethodPayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsetContractMethodPayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetContractMethodPayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContractMethodPayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContractMethodPayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTxPayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxPayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxPayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintAccountManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccountManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountMultiSign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payloads)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	l = len(m.ClientSign)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	l = len(m.PublicKeyInfo)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	return n
}

func (m *AccountMultiSignsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasMultiSigns) > 0 {
		for _, e := range m.GasMultiSigns {
			l = e.Size()
			n += 1 + l + sovAccountManager(uint64(l))
		}
	}
	return n
}

func (m *RechargeGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	if m.GasAmount != 0 {
		n += 1 + sovAccountManager(uint64(m.GasAmount))
	}
	return n
}

func (m *RechargeGasReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchRechargeGas) > 0 {
		for _, e := range m.BatchRechargeGas {
			l = e.Size()
			n += 1 + l + sovAccountManager(uint64(l))
		}
	}
	return n
}

func (m *SetContractMethodPayerParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	l = len(m.PayerAddress)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovAccountManager(uint64(l))
	}
	return n
}

func (m *SetContractMethodPayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnsetContractMethodPayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetContractMethodPayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTxPayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAccountManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountManager(x uint64) (n int) {
	return sovAccountManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountMultiSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMultiSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMultiSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads[:0], dAtA[iNdEx:postIndex]...)
			if m.Payloads == nil {
				m.Payloads = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSign = append(m.ClientSign[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientSign == nil {
				m.ClientSign = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyInfo = append(m.PublicKeyInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKeyInfo == nil {
				m.PublicKeyInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMultiSignsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMultiSignsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMultiSignsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasMultiSigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasMultiSigns = append(m.GasMultiSigns, &AccountMultiSign{})
			if err := m.GasMultiSigns[len(m.GasMultiSigns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAmount", wireType)
			}
			m.GasAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeGasReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeGasReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeGasReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchRechargeGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchRechargeGas = append(m.BatchRechargeGas, &RechargeGas{})
			if err := m.BatchRechargeGas[len(m.BatchRechargeGas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetContractMethodPayerParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetContractMethodPayerParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetContractMethodPayerParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetContractMethodPayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetContractMethodPayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetContractMethodPayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsetContractMethodPayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsetContractMethodPayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsetContractMethodPayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContractMethodPayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContractMethodPayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContractMethodPayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxPayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxPayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxPayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccountManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccountManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccountManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccountManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccountManager = fmt.Errorf("proto: unexpected end of group")
)
