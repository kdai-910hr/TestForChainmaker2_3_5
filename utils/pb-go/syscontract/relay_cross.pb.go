// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/relay_cross.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelayCrossFunction int32

const (
	// save gateway
	RelayCrossFunction_SAVE_GATEWAY RelayCrossFunction = 0
	// update gateway
	RelayCrossFunction_UPDATE_GATEWAY RelayCrossFunction = 1
	// save cross chain info
	RelayCrossFunction_SAVE_CROSS_CHAIN_INFO RelayCrossFunction = 2
	// get error cross chain transaction list
	RelayCrossFunction_GET_ERROR_CROSS_CHAIN_TX_LIST RelayCrossFunction = 3
	// delete error cross chain transaction list
	RelayCrossFunction_DELETE_ERROR_CROSS_CHAIN_TX_LIST RelayCrossFunction = 4
	// update cross chain try
	RelayCrossFunction_UPDATE_CROSS_CHAIN_TRY RelayCrossFunction = 5
	// update cross chain result
	RelayCrossFunction_UPDATE_CROSS_CHAIN_RESULT RelayCrossFunction = 6
	// update cross chain confirm
	RelayCrossFunction_UPDATE_CROSS_CHAIN_CONFIRM RelayCrossFunction = 7
	// update source gateway confirm
	RelayCrossFunction_UPDATE_SRC_GATEWAY_CONFIRM RelayCrossFunction = 8
	// get gateway number
	RelayCrossFunction_GET_GATEWAY_NUM RelayCrossFunction = 9
	// get gateway
	RelayCrossFunction_GET_GATEWAY RelayCrossFunction = 10
	// get gateway by range
	RelayCrossFunction_GET_GATEWAY_BY_RANGE RelayCrossFunction = 11
	// get cross chain number
	RelayCrossFunction_GET_CROSS_CHAIN_NUM RelayCrossFunction = 12
	// get cross chain information
	RelayCrossFunction_GET_CROSS_CHAIN_INFO RelayCrossFunction = 13
	// get cross chain information by range
	RelayCrossFunction_GET_CROSS_CHAIN_INFO_BY_RANGE RelayCrossFunction = 14
	// get not end cross chian id list
	RelayCrossFunction_GET_NOT_END_CROSS_CHIAN_ID_LIST RelayCrossFunction = 15
	// set admin
	RelayCrossFunction_SET_CROSS_ADMIN RelayCrossFunction = 16
	// delete admin
	RelayCrossFunction_DELETE_CROSS_ADEMIN RelayCrossFunction = 17
	// check if sender is admin
	RelayCrossFunction_IS_CROSS_ADMIN RelayCrossFunction = 18
)

var RelayCrossFunction_name = map[int32]string{
	0:  "SAVE_GATEWAY",
	1:  "UPDATE_GATEWAY",
	2:  "SAVE_CROSS_CHAIN_INFO",
	3:  "GET_ERROR_CROSS_CHAIN_TX_LIST",
	4:  "DELETE_ERROR_CROSS_CHAIN_TX_LIST",
	5:  "UPDATE_CROSS_CHAIN_TRY",
	6:  "UPDATE_CROSS_CHAIN_RESULT",
	7:  "UPDATE_CROSS_CHAIN_CONFIRM",
	8:  "UPDATE_SRC_GATEWAY_CONFIRM",
	9:  "GET_GATEWAY_NUM",
	10: "GET_GATEWAY",
	11: "GET_GATEWAY_BY_RANGE",
	12: "GET_CROSS_CHAIN_NUM",
	13: "GET_CROSS_CHAIN_INFO",
	14: "GET_CROSS_CHAIN_INFO_BY_RANGE",
	15: "GET_NOT_END_CROSS_CHIAN_ID_LIST",
	16: "SET_CROSS_ADMIN",
	17: "DELETE_CROSS_ADEMIN",
	18: "IS_CROSS_ADMIN",
}

var RelayCrossFunction_value = map[string]int32{
	"SAVE_GATEWAY":                     0,
	"UPDATE_GATEWAY":                   1,
	"SAVE_CROSS_CHAIN_INFO":            2,
	"GET_ERROR_CROSS_CHAIN_TX_LIST":    3,
	"DELETE_ERROR_CROSS_CHAIN_TX_LIST": 4,
	"UPDATE_CROSS_CHAIN_TRY":           5,
	"UPDATE_CROSS_CHAIN_RESULT":        6,
	"UPDATE_CROSS_CHAIN_CONFIRM":       7,
	"UPDATE_SRC_GATEWAY_CONFIRM":       8,
	"GET_GATEWAY_NUM":                  9,
	"GET_GATEWAY":                      10,
	"GET_GATEWAY_BY_RANGE":             11,
	"GET_CROSS_CHAIN_NUM":              12,
	"GET_CROSS_CHAIN_INFO":             13,
	"GET_CROSS_CHAIN_INFO_BY_RANGE":    14,
	"GET_NOT_END_CROSS_CHIAN_ID_LIST":  15,
	"SET_CROSS_ADMIN":                  16,
	"DELETE_CROSS_ADEMIN":              17,
	"IS_CROSS_ADMIN":                   18,
}

func (x RelayCrossFunction) String() string {
	return proto.EnumName(RelayCrossFunction_name, int32(x))
}

func (RelayCrossFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{0}
}

type SaveGateway_Parameter int32

const (
	// gateway information byte
	SaveGateway_GATEWAY_INFO_BYTE SaveGateway_Parameter = 0
)

var SaveGateway_Parameter_name = map[int32]string{
	0: "GATEWAY_INFO_BYTE",
}

var SaveGateway_Parameter_value = map[string]int32{
	"GATEWAY_INFO_BYTE": 0,
}

func (x SaveGateway_Parameter) String() string {
	return proto.EnumName(SaveGateway_Parameter_name, int32(x))
}

func (SaveGateway_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{0, 0}
}

type UpdateGateway_Parameter int32

const (
	// gateway id
	UpdateGateway_GATEWAY_ID UpdateGateway_Parameter = 0
	// gateway information byte
	UpdateGateway_GATEWAY_INFO_BYTE UpdateGateway_Parameter = 1
)

var UpdateGateway_Parameter_name = map[int32]string{
	0: "GATEWAY_ID",
	1: "GATEWAY_INFO_BYTE",
}

var UpdateGateway_Parameter_value = map[string]int32{
	"GATEWAY_ID":        0,
	"GATEWAY_INFO_BYTE": 1,
}

func (x UpdateGateway_Parameter) String() string {
	return proto.EnumName(UpdateGateway_Parameter_name, int32(x))
}

func (UpdateGateway_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{1, 0}
}

type GetGateway_Parameter int32

const (
	// gateway id
	GetGateway_GATEWAY_ID GetGateway_Parameter = 0
)

var GetGateway_Parameter_name = map[int32]string{
	0: "GATEWAY_ID",
}

var GetGateway_Parameter_value = map[string]int32{
	"GATEWAY_ID": 0,
}

func (x GetGateway_Parameter) String() string {
	return proto.EnumName(GetGateway_Parameter_name, int32(x))
}

func (GetGateway_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{2, 0}
}

type GetGatewayByRange_Parameter int32

const (
	// start gateway id
	GetGatewayByRange_START_GATEWAY_ID GetGatewayByRange_Parameter = 0
	// stop gateway id
	GetGatewayByRange_STOP_GATEWAY_ID GetGatewayByRange_Parameter = 1
)

var GetGatewayByRange_Parameter_name = map[int32]string{
	0: "START_GATEWAY_ID",
	1: "STOP_GATEWAY_ID",
}

var GetGatewayByRange_Parameter_value = map[string]int32{
	"START_GATEWAY_ID": 0,
	"STOP_GATEWAY_ID":  1,
}

func (x GetGatewayByRange_Parameter) String() string {
	return proto.EnumName(GetGatewayByRange_Parameter_name, int32(x))
}

func (GetGatewayByRange_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{3, 0}
}

type SaveCrossChainInfo_Parameter int32

const (
	// cross_chain_info_byte
	SaveCrossChainInfo_CROSS_CHAIN_INFO_BYTE SaveCrossChainInfo_Parameter = 0
)

var SaveCrossChainInfo_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_INFO_BYTE",
}

var SaveCrossChainInfo_Parameter_value = map[string]int32{
	"CROSS_CHAIN_INFO_BYTE": 0,
}

func (x SaveCrossChainInfo_Parameter) String() string {
	return proto.EnumName(SaveCrossChainInfo_Parameter_name, int32(x))
}

func (SaveCrossChainInfo_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{4, 0}
}

type UpdateCrossChainTry_Parameter int32

const (
	// cross chain id
	UpdateCrossChainTry_CROSS_CHAIN_ID UpdateCrossChainTry_Parameter = 0
	// cross chain transaction byte
	UpdateCrossChainTry_CROSS_CHAIN_TX_BYTE UpdateCrossChainTry_Parameter = 1
)

var UpdateCrossChainTry_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
	1: "CROSS_CHAIN_TX_BYTE",
}

var UpdateCrossChainTry_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID":      0,
	"CROSS_CHAIN_TX_BYTE": 1,
}

func (x UpdateCrossChainTry_Parameter) String() string {
	return proto.EnumName(UpdateCrossChainTry_Parameter_name, int32(x))
}

func (UpdateCrossChainTry_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{5, 0}
}

type UpdateCrossChainResult_Parameter int32

const (
	// cross chain id
	UpdateCrossChainResult_CROSS_CHAIN_ID UpdateCrossChainResult_Parameter = 0
	// cross chain result
	UpdateCrossChainResult_CROSS_CHAIN_RESULT UpdateCrossChainResult_Parameter = 1
)

var UpdateCrossChainResult_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
	1: "CROSS_CHAIN_RESULT",
}

var UpdateCrossChainResult_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID":     0,
	"CROSS_CHAIN_RESULT": 1,
}

func (x UpdateCrossChainResult_Parameter) String() string {
	return proto.EnumName(UpdateCrossChainResult_Parameter_name, int32(x))
}

func (UpdateCrossChainResult_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{6, 0}
}

type DeleteErrorCrossChainTxList_Parameter int32

const (
	// cross chain id
	DeleteErrorCrossChainTxList_CROSS_CHAIN_ID DeleteErrorCrossChainTxList_Parameter = 0
)

var DeleteErrorCrossChainTxList_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
}

var DeleteErrorCrossChainTxList_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID": 0,
}

func (x DeleteErrorCrossChainTxList_Parameter) String() string {
	return proto.EnumName(DeleteErrorCrossChainTxList_Parameter_name, int32(x))
}

func (DeleteErrorCrossChainTxList_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{7, 0}
}

type UpdateCrossChainConfirm_Parameter int32

const (
	// cross chain id
	UpdateCrossChainConfirm_CROSS_CHAIN_ID UpdateCrossChainConfirm_Parameter = 0
	// cross chain confirm byte
	UpdateCrossChainConfirm_CROSS_CHAIN_CONFIRM_BYTE UpdateCrossChainConfirm_Parameter = 1
)

var UpdateCrossChainConfirm_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
	1: "CROSS_CHAIN_CONFIRM_BYTE",
}

var UpdateCrossChainConfirm_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID":           0,
	"CROSS_CHAIN_CONFIRM_BYTE": 1,
}

func (x UpdateCrossChainConfirm_Parameter) String() string {
	return proto.EnumName(UpdateCrossChainConfirm_Parameter_name, int32(x))
}

func (UpdateCrossChainConfirm_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{8, 0}
}

type UpdateSrcGatewayConfirm_Parameter int32

const (
	// cross chain id
	UpdateSrcGatewayConfirm_CROSS_CHAIN_ID UpdateSrcGatewayConfirm_Parameter = 0
	// confirm result
	UpdateSrcGatewayConfirm_CONFIRM_RESULT UpdateSrcGatewayConfirm_Parameter = 1
)

var UpdateSrcGatewayConfirm_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
	1: "CONFIRM_RESULT",
}

var UpdateSrcGatewayConfirm_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID": 0,
	"CONFIRM_RESULT": 1,
}

func (x UpdateSrcGatewayConfirm_Parameter) String() string {
	return proto.EnumName(UpdateSrcGatewayConfirm_Parameter_name, int32(x))
}

func (UpdateSrcGatewayConfirm_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{9, 0}
}

type GetCrossChainInfo_Parameter int32

const (
	// cross chain id
	GetCrossChainInfo_CROSS_CHAIN_ID GetCrossChainInfo_Parameter = 0
)

var GetCrossChainInfo_Parameter_name = map[int32]string{
	0: "CROSS_CHAIN_ID",
}

var GetCrossChainInfo_Parameter_value = map[string]int32{
	"CROSS_CHAIN_ID": 0,
}

func (x GetCrossChainInfo_Parameter) String() string {
	return proto.EnumName(GetCrossChainInfo_Parameter_name, int32(x))
}

func (GetCrossChainInfo_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{10, 0}
}

type GetCrossChainInfoByRange_Parameter int32

const (
	// start cross chain id
	GetCrossChainInfoByRange_START_CROSS_CHAIN_ID GetCrossChainInfoByRange_Parameter = 0
	// stop cross chain id
	GetCrossChainInfoByRange_STOP_CROSS_CHAIN_ID GetCrossChainInfoByRange_Parameter = 1
)

var GetCrossChainInfoByRange_Parameter_name = map[int32]string{
	0: "START_CROSS_CHAIN_ID",
	1: "STOP_CROSS_CHAIN_ID",
}

var GetCrossChainInfoByRange_Parameter_value = map[string]int32{
	"START_CROSS_CHAIN_ID": 0,
	"STOP_CROSS_CHAIN_ID":  1,
}

func (x GetCrossChainInfoByRange_Parameter) String() string {
	return proto.EnumName(GetCrossChainInfoByRange_Parameter_name, int32(x))
}

func (GetCrossChainInfoByRange_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{11, 0}
}

type SetCrossAdmin_Parameter int32

const (
	// admin address
	SetCrossAdmin_CROSS_ADMIN_ADDRESS SetCrossAdmin_Parameter = 0
)

var SetCrossAdmin_Parameter_name = map[int32]string{
	0: "CROSS_ADMIN_ADDRESS",
}

var SetCrossAdmin_Parameter_value = map[string]int32{
	"CROSS_ADMIN_ADDRESS": 0,
}

func (x SetCrossAdmin_Parameter) String() string {
	return proto.EnumName(SetCrossAdmin_Parameter_name, int32(x))
}

func (SetCrossAdmin_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{12, 0}
}

type DeleteCrossAdmin_Parameter int32

const (
	// admin address
	DeleteCrossAdmin_CROSS_ADMIN_ADDRESS DeleteCrossAdmin_Parameter = 0
)

var DeleteCrossAdmin_Parameter_name = map[int32]string{
	0: "CROSS_ADMIN_ADDRESS",
}

var DeleteCrossAdmin_Parameter_value = map[string]int32{
	"CROSS_ADMIN_ADDRESS": 0,
}

func (x DeleteCrossAdmin_Parameter) String() string {
	return proto.EnumName(DeleteCrossAdmin_Parameter_name, int32(x))
}

func (DeleteCrossAdmin_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{13, 0}
}

type EventDataType_Parameter int32

const (
	// string
	EventDataType_STRING EventDataType_Parameter = 0
	// map
	EventDataType_MAP EventDataType_Parameter = 1
	// byte
	EventDataType_BYTE EventDataType_Parameter = 2
	// BOOL
	EventDataType_BOOL EventDataType_Parameter = 3
	// int
	EventDataType_INT EventDataType_Parameter = 4
	// float
	EventDataType_FLOAT EventDataType_Parameter = 5
	// array
	EventDataType_ARRAY EventDataType_Parameter = 6
	// hash, bcos
	EventDataType_HASH EventDataType_Parameter = 7
	// ADDRESS, bcos
	EventDataType_ADDRESS EventDataType_Parameter = 8
)

var EventDataType_Parameter_name = map[int32]string{
	0: "STRING",
	1: "MAP",
	2: "BYTE",
	3: "BOOL",
	4: "INT",
	5: "FLOAT",
	6: "ARRAY",
	7: "HASH",
	8: "ADDRESS",
}

var EventDataType_Parameter_value = map[string]int32{
	"STRING":  0,
	"MAP":     1,
	"BYTE":    2,
	"BOOL":    3,
	"INT":     4,
	"FLOAT":   5,
	"ARRAY":   6,
	"HASH":    7,
	"ADDRESS": 8,
}

func (x EventDataType_Parameter) String() string {
	return proto.EnumName(EventDataType_Parameter_name, int32(x))
}

func (EventDataType_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{14, 0}
}

type Code_Parameter int32

const (
	// sucess
	Code_GATEWAY_SUCCESS Code_Parameter = 0
	// timeout
	Code_GATEWAY_TIMEOUT Code_Parameter = 1
	// parameter invalid
	Code_INVALID_PARAMETER Code_Parameter = 2
	// tx prove error
	Code_TX_PROVE_ERROR Code_Parameter = 3
	// contract fail
	Code_CONTRACT_FAIL Code_Parameter = 4
	// internal error
	Code_INTERNAL_ERROR Code_Parameter = 5
	// relay chain error
	Code_RELAY_CHAIN_ERROR Code_Parameter = 6
)

var Code_Parameter_name = map[int32]string{
	0: "GATEWAY_SUCCESS",
	1: "GATEWAY_TIMEOUT",
	2: "INVALID_PARAMETER",
	3: "TX_PROVE_ERROR",
	4: "CONTRACT_FAIL",
	5: "INTERNAL_ERROR",
	6: "RELAY_CHAIN_ERROR",
}

var Code_Parameter_value = map[string]int32{
	"GATEWAY_SUCCESS":   0,
	"GATEWAY_TIMEOUT":   1,
	"INVALID_PARAMETER": 2,
	"TX_PROVE_ERROR":    3,
	"CONTRACT_FAIL":     4,
	"INTERNAL_ERROR":    5,
	"RELAY_CHAIN_ERROR": 6,
}

func (x Code_Parameter) String() string {
	return proto.EnumName(Code_Parameter_name, int32(x))
}

func (Code_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{15, 0}
}

type CrossType_Parameter int32

const (
	// cross chain query
	CrossType_QUERY CrossType_Parameter = 0
	// cross chain invoke
	CrossType_INVOKE CrossType_Parameter = 1
)

var CrossType_Parameter_name = map[int32]string{
	0: "QUERY",
	1: "INVOKE",
}

var CrossType_Parameter_value = map[string]int32{
	"QUERY":  0,
	"INVOKE": 1,
}

func (x CrossType_Parameter) String() string {
	return proto.EnumName(CrossType_Parameter_name, int32(x))
}

func (CrossType_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{16, 0}
}

type TxResultValue_Parameter int32

const (
	// success
	TxResultValue_TX_SUCCESS TxResultValue_Parameter = 0
	// timeout
	TxResultValue_TX_TIMEOUT TxResultValue_Parameter = 1
	// fail
	TxResultValue_TX_FAIL TxResultValue_Parameter = 2
	// tx not exist
	TxResultValue_TX_NOT_EXIST TxResultValue_Parameter = 3
	// no permissions
	TxResultValue_TX_NO_PERMISSIONS TxResultValue_Parameter = 4
	// no gateway
	TxResultValue_GATEWAY_NOT_FOUND TxResultValue_Parameter = 5
	// gateway ping error
	TxResultValue_GATEWAY_PINGPONG_ERROR TxResultValue_Parameter = 6
	// chain ping error
	TxResultValue_CHAIN_PING_ERROR TxResultValue_Parameter = 7
	// src gateway get error
	TxResultValue_SRC_GATEWAY_GET_ERROR TxResultValue_Parameter = 8
)

var TxResultValue_Parameter_name = map[int32]string{
	0: "TX_SUCCESS",
	1: "TX_TIMEOUT",
	2: "TX_FAIL",
	3: "TX_NOT_EXIST",
	4: "TX_NO_PERMISSIONS",
	5: "GATEWAY_NOT_FOUND",
	6: "GATEWAY_PINGPONG_ERROR",
	7: "CHAIN_PING_ERROR",
	8: "SRC_GATEWAY_GET_ERROR",
}

var TxResultValue_Parameter_value = map[string]int32{
	"TX_SUCCESS":             0,
	"TX_TIMEOUT":             1,
	"TX_FAIL":                2,
	"TX_NOT_EXIST":           3,
	"TX_NO_PERMISSIONS":      4,
	"GATEWAY_NOT_FOUND":      5,
	"GATEWAY_PINGPONG_ERROR": 6,
	"CHAIN_PING_ERROR":       7,
	"SRC_GATEWAY_GET_ERROR":  8,
}

func (x TxResultValue_Parameter) String() string {
	return proto.EnumName(TxResultValue_Parameter_name, int32(x))
}

func (TxResultValue_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{17, 0}
}

type TxVerifyRsult_Parameter int32

const (
	// success
	TxVerifyRsult_VERIFY_SUCCESS TxVerifyRsult_Parameter = 0
	// failed
	TxVerifyRsult_VERIFY_INVALID TxVerifyRsult_Parameter = 1
	// not need
	TxVerifyRsult_VERIFY_NOT_NEED TxVerifyRsult_Parameter = 2
)

var TxVerifyRsult_Parameter_name = map[int32]string{
	0: "VERIFY_SUCCESS",
	1: "VERIFY_INVALID",
	2: "VERIFY_NOT_NEED",
}

var TxVerifyRsult_Parameter_value = map[string]int32{
	"VERIFY_SUCCESS":  0,
	"VERIFY_INVALID":  1,
	"VERIFY_NOT_NEED": 2,
}

func (x TxVerifyRsult_Parameter) String() string {
	return proto.EnumName(TxVerifyRsult_Parameter_name, int32(x))
}

func (TxVerifyRsult_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{18, 0}
}

type CrossChainStateValue_Parameter int32

const (
	// new
	CrossChainStateValue_NEW CrossChainStateValue_Parameter = 0
	// wait execute
	CrossChainStateValue_WAIT_EXECUTE CrossChainStateValue_Parameter = 1
	// wait confirm
	CrossChainStateValue_WAIT_CONFIRM CrossChainStateValue_Parameter = 2
	// confirm end
	CrossChainStateValue_CONFIRM_END CrossChainStateValue_Parameter = 3
	// cancel end
	CrossChainStateValue_CANCEL_END CrossChainStateValue_Parameter = 4
)

var CrossChainStateValue_Parameter_name = map[int32]string{
	0: "NEW",
	1: "WAIT_EXECUTE",
	2: "WAIT_CONFIRM",
	3: "CONFIRM_END",
	4: "CANCEL_END",
}

var CrossChainStateValue_Parameter_value = map[string]int32{
	"NEW":          0,
	"WAIT_EXECUTE": 1,
	"WAIT_CONFIRM": 2,
	"CONFIRM_END":  3,
	"CANCEL_END":   4,
}

func (x CrossChainStateValue_Parameter) String() string {
	return proto.EnumName(CrossChainStateValue_Parameter_name, int32(x))
}

func (CrossChainStateValue_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{19, 0}
}

type EventName_Parameter int32

const (
	// new
	EventName_NEW_CROSS_CHAIN EventName_Parameter = 0
	// try end
	EventName_CROSS_CHAIN_TRY_END EventName_Parameter = 1
	// update result end
	EventName_UPADATE_RESULT_END EventName_Parameter = 2
	// confirm end
	EventName_GATEWAY_CONFIRM_END EventName_Parameter = 3
	// src gateway confirm end
	EventName_SRC_GATEWAY_CONFIRM_END EventName_Parameter = 4
	// set admin
	EventName_SET_CROSS_ADMIN EventName_Parameter = 5
	// delete admin
	EventName_DELETE_CROSS_ADMIN EventName_Parameter = 6
	// new gateway
	EventName_NEW_CROSS_GATEWAY EventName_Parameter = 7
	// gateway update
	EventName_CROSS_GATEWAY_UPDATE EventName_Parameter = 8
)

var EventName_Parameter_name = map[int32]string{
	0: "NEW_CROSS_CHAIN",
	1: "CROSS_CHAIN_TRY_END",
	2: "UPADATE_RESULT_END",
	3: "GATEWAY_CONFIRM_END",
	4: "SRC_GATEWAY_CONFIRM_END",
	5: "SET_CROSS_ADMIN",
	6: "DELETE_CROSS_ADMIN",
	7: "NEW_CROSS_GATEWAY",
	8: "CROSS_GATEWAY_UPDATE",
}

var EventName_Parameter_value = map[string]int32{
	"NEW_CROSS_CHAIN":         0,
	"CROSS_CHAIN_TRY_END":     1,
	"UPADATE_RESULT_END":      2,
	"GATEWAY_CONFIRM_END":     3,
	"SRC_GATEWAY_CONFIRM_END": 4,
	"SET_CROSS_ADMIN":         5,
	"DELETE_CROSS_ADMIN":      6,
	"NEW_CROSS_GATEWAY":       7,
	"CROSS_GATEWAY_UPDATE":    8,
}

func (x EventName_Parameter) String() string {
	return proto.EnumName(EventName_Parameter_name, int32(x))
}

func (EventName_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{20, 0}
}

type SaveGateway struct {
}

func (m *SaveGateway) Reset()         { *m = SaveGateway{} }
func (m *SaveGateway) String() string { return proto.CompactTextString(m) }
func (*SaveGateway) ProtoMessage()    {}
func (*SaveGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{0}
}
func (m *SaveGateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveGateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveGateway.Merge(m, src)
}
func (m *SaveGateway) XXX_Size() int {
	return m.Size()
}
func (m *SaveGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveGateway.DiscardUnknown(m)
}

var xxx_messageInfo_SaveGateway proto.InternalMessageInfo

type UpdateGateway struct {
}

func (m *UpdateGateway) Reset()         { *m = UpdateGateway{} }
func (m *UpdateGateway) String() string { return proto.CompactTextString(m) }
func (*UpdateGateway) ProtoMessage()    {}
func (*UpdateGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{1}
}
func (m *UpdateGateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGateway.Merge(m, src)
}
func (m *UpdateGateway) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGateway.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGateway proto.InternalMessageInfo

type GetGateway struct {
}

func (m *GetGateway) Reset()         { *m = GetGateway{} }
func (m *GetGateway) String() string { return proto.CompactTextString(m) }
func (*GetGateway) ProtoMessage()    {}
func (*GetGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{2}
}
func (m *GetGateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGateway.Merge(m, src)
}
func (m *GetGateway) XXX_Size() int {
	return m.Size()
}
func (m *GetGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGateway.DiscardUnknown(m)
}

var xxx_messageInfo_GetGateway proto.InternalMessageInfo

type GetGatewayByRange struct {
}

func (m *GetGatewayByRange) Reset()         { *m = GetGatewayByRange{} }
func (m *GetGatewayByRange) String() string { return proto.CompactTextString(m) }
func (*GetGatewayByRange) ProtoMessage()    {}
func (*GetGatewayByRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{3}
}
func (m *GetGatewayByRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayByRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayByRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGatewayByRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayByRange.Merge(m, src)
}
func (m *GetGatewayByRange) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayByRange) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayByRange.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayByRange proto.InternalMessageInfo

type SaveCrossChainInfo struct {
}

func (m *SaveCrossChainInfo) Reset()         { *m = SaveCrossChainInfo{} }
func (m *SaveCrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*SaveCrossChainInfo) ProtoMessage()    {}
func (*SaveCrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{4}
}
func (m *SaveCrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveCrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveCrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveCrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCrossChainInfo.Merge(m, src)
}
func (m *SaveCrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *SaveCrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCrossChainInfo proto.InternalMessageInfo

type UpdateCrossChainTry struct {
}

func (m *UpdateCrossChainTry) Reset()         { *m = UpdateCrossChainTry{} }
func (m *UpdateCrossChainTry) String() string { return proto.CompactTextString(m) }
func (*UpdateCrossChainTry) ProtoMessage()    {}
func (*UpdateCrossChainTry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{5}
}
func (m *UpdateCrossChainTry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCrossChainTry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCrossChainTry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCrossChainTry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrossChainTry.Merge(m, src)
}
func (m *UpdateCrossChainTry) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCrossChainTry) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrossChainTry.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrossChainTry proto.InternalMessageInfo

type UpdateCrossChainResult struct {
}

func (m *UpdateCrossChainResult) Reset()         { *m = UpdateCrossChainResult{} }
func (m *UpdateCrossChainResult) String() string { return proto.CompactTextString(m) }
func (*UpdateCrossChainResult) ProtoMessage()    {}
func (*UpdateCrossChainResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{6}
}
func (m *UpdateCrossChainResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCrossChainResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCrossChainResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCrossChainResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrossChainResult.Merge(m, src)
}
func (m *UpdateCrossChainResult) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCrossChainResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrossChainResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrossChainResult proto.InternalMessageInfo

type DeleteErrorCrossChainTxList struct {
}

func (m *DeleteErrorCrossChainTxList) Reset()         { *m = DeleteErrorCrossChainTxList{} }
func (m *DeleteErrorCrossChainTxList) String() string { return proto.CompactTextString(m) }
func (*DeleteErrorCrossChainTxList) ProtoMessage()    {}
func (*DeleteErrorCrossChainTxList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{7}
}
func (m *DeleteErrorCrossChainTxList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteErrorCrossChainTxList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteErrorCrossChainTxList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteErrorCrossChainTxList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteErrorCrossChainTxList.Merge(m, src)
}
func (m *DeleteErrorCrossChainTxList) XXX_Size() int {
	return m.Size()
}
func (m *DeleteErrorCrossChainTxList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteErrorCrossChainTxList.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteErrorCrossChainTxList proto.InternalMessageInfo

type UpdateCrossChainConfirm struct {
}

func (m *UpdateCrossChainConfirm) Reset()         { *m = UpdateCrossChainConfirm{} }
func (m *UpdateCrossChainConfirm) String() string { return proto.CompactTextString(m) }
func (*UpdateCrossChainConfirm) ProtoMessage()    {}
func (*UpdateCrossChainConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{8}
}
func (m *UpdateCrossChainConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCrossChainConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCrossChainConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCrossChainConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCrossChainConfirm.Merge(m, src)
}
func (m *UpdateCrossChainConfirm) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCrossChainConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCrossChainConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCrossChainConfirm proto.InternalMessageInfo

type UpdateSrcGatewayConfirm struct {
}

func (m *UpdateSrcGatewayConfirm) Reset()         { *m = UpdateSrcGatewayConfirm{} }
func (m *UpdateSrcGatewayConfirm) String() string { return proto.CompactTextString(m) }
func (*UpdateSrcGatewayConfirm) ProtoMessage()    {}
func (*UpdateSrcGatewayConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{9}
}
func (m *UpdateSrcGatewayConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSrcGatewayConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSrcGatewayConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSrcGatewayConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSrcGatewayConfirm.Merge(m, src)
}
func (m *UpdateSrcGatewayConfirm) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSrcGatewayConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSrcGatewayConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSrcGatewayConfirm proto.InternalMessageInfo

type GetCrossChainInfo struct {
}

func (m *GetCrossChainInfo) Reset()         { *m = GetCrossChainInfo{} }
func (m *GetCrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*GetCrossChainInfo) ProtoMessage()    {}
func (*GetCrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{10}
}
func (m *GetCrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrossChainInfo.Merge(m, src)
}
func (m *GetCrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetCrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrossChainInfo proto.InternalMessageInfo

type GetCrossChainInfoByRange struct {
}

func (m *GetCrossChainInfoByRange) Reset()         { *m = GetCrossChainInfoByRange{} }
func (m *GetCrossChainInfoByRange) String() string { return proto.CompactTextString(m) }
func (*GetCrossChainInfoByRange) ProtoMessage()    {}
func (*GetCrossChainInfoByRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{11}
}
func (m *GetCrossChainInfoByRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCrossChainInfoByRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCrossChainInfoByRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCrossChainInfoByRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCrossChainInfoByRange.Merge(m, src)
}
func (m *GetCrossChainInfoByRange) XXX_Size() int {
	return m.Size()
}
func (m *GetCrossChainInfoByRange) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCrossChainInfoByRange.DiscardUnknown(m)
}

var xxx_messageInfo_GetCrossChainInfoByRange proto.InternalMessageInfo

type SetCrossAdmin struct {
}

func (m *SetCrossAdmin) Reset()         { *m = SetCrossAdmin{} }
func (m *SetCrossAdmin) String() string { return proto.CompactTextString(m) }
func (*SetCrossAdmin) ProtoMessage()    {}
func (*SetCrossAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{12}
}
func (m *SetCrossAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCrossAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCrossAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCrossAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCrossAdmin.Merge(m, src)
}
func (m *SetCrossAdmin) XXX_Size() int {
	return m.Size()
}
func (m *SetCrossAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCrossAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_SetCrossAdmin proto.InternalMessageInfo

type DeleteCrossAdmin struct {
}

func (m *DeleteCrossAdmin) Reset()         { *m = DeleteCrossAdmin{} }
func (m *DeleteCrossAdmin) String() string { return proto.CompactTextString(m) }
func (*DeleteCrossAdmin) ProtoMessage()    {}
func (*DeleteCrossAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{13}
}
func (m *DeleteCrossAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCrossAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCrossAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCrossAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCrossAdmin.Merge(m, src)
}
func (m *DeleteCrossAdmin) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCrossAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCrossAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCrossAdmin proto.InternalMessageInfo

type EventDataType struct {
}

func (m *EventDataType) Reset()         { *m = EventDataType{} }
func (m *EventDataType) String() string { return proto.CompactTextString(m) }
func (*EventDataType) ProtoMessage()    {}
func (*EventDataType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{14}
}
func (m *EventDataType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDataType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDataType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDataType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataType.Merge(m, src)
}
func (m *EventDataType) XXX_Size() int {
	return m.Size()
}
func (m *EventDataType) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataType.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataType proto.InternalMessageInfo

type Code struct {
}

func (m *Code) Reset()         { *m = Code{} }
func (m *Code) String() string { return proto.CompactTextString(m) }
func (*Code) ProtoMessage()    {}
func (*Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{15}
}
func (m *Code) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Code.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Code.Merge(m, src)
}
func (m *Code) XXX_Size() int {
	return m.Size()
}
func (m *Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Code proto.InternalMessageInfo

type CrossType struct {
}

func (m *CrossType) Reset()         { *m = CrossType{} }
func (m *CrossType) String() string { return proto.CompactTextString(m) }
func (*CrossType) ProtoMessage()    {}
func (*CrossType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{16}
}
func (m *CrossType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossType.Merge(m, src)
}
func (m *CrossType) XXX_Size() int {
	return m.Size()
}
func (m *CrossType) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossType.DiscardUnknown(m)
}

var xxx_messageInfo_CrossType proto.InternalMessageInfo

type TxResultValue struct {
}

func (m *TxResultValue) Reset()         { *m = TxResultValue{} }
func (m *TxResultValue) String() string { return proto.CompactTextString(m) }
func (*TxResultValue) ProtoMessage()    {}
func (*TxResultValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{17}
}
func (m *TxResultValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResultValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResultValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResultValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResultValue.Merge(m, src)
}
func (m *TxResultValue) XXX_Size() int {
	return m.Size()
}
func (m *TxResultValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResultValue.DiscardUnknown(m)
}

var xxx_messageInfo_TxResultValue proto.InternalMessageInfo

type TxVerifyRsult struct {
}

func (m *TxVerifyRsult) Reset()         { *m = TxVerifyRsult{} }
func (m *TxVerifyRsult) String() string { return proto.CompactTextString(m) }
func (*TxVerifyRsult) ProtoMessage()    {}
func (*TxVerifyRsult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{18}
}
func (m *TxVerifyRsult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxVerifyRsult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxVerifyRsult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxVerifyRsult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxVerifyRsult.Merge(m, src)
}
func (m *TxVerifyRsult) XXX_Size() int {
	return m.Size()
}
func (m *TxVerifyRsult) XXX_DiscardUnknown() {
	xxx_messageInfo_TxVerifyRsult.DiscardUnknown(m)
}

var xxx_messageInfo_TxVerifyRsult proto.InternalMessageInfo

type CrossChainStateValue struct {
}

func (m *CrossChainStateValue) Reset()         { *m = CrossChainStateValue{} }
func (m *CrossChainStateValue) String() string { return proto.CompactTextString(m) }
func (*CrossChainStateValue) ProtoMessage()    {}
func (*CrossChainStateValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{19}
}
func (m *CrossChainStateValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainStateValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainStateValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainStateValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainStateValue.Merge(m, src)
}
func (m *CrossChainStateValue) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainStateValue) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainStateValue.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainStateValue proto.InternalMessageInfo

type EventName struct {
}

func (m *EventName) Reset()         { *m = EventName{} }
func (m *EventName) String() string { return proto.CompactTextString(m) }
func (*EventName) ProtoMessage()    {}
func (*EventName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{20}
}
func (m *EventName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventName.Merge(m, src)
}
func (m *EventName) XXX_Size() int {
	return m.Size()
}
func (m *EventName) XXX_DiscardUnknown() {
	xxx_messageInfo_EventName.DiscardUnknown(m)
}

var xxx_messageInfo_EventName proto.InternalMessageInfo

type CrossChainInfo struct {
	// cross chain id
	CrossChainId string `protobuf:"bytes,1,opt,name=cross_chain_id,json=crossChainId,proto3" json:"cross_chain_id,omitempty"`
	// cross chain name
	CrossChainName string `protobuf:"bytes,2,opt,name=cross_chain_name,json=crossChainName,proto3" json:"cross_chain_name,omitempty"`
	// cross chain flag
	CrossChainFlag string `protobuf:"bytes,3,opt,name=cross_chain_flag,json=crossChainFlag,proto3" json:"cross_chain_flag,omitempty"`
	// src gateway id
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// cross chain message
	CrossChainMsg []*CrossChainMsg `protobuf:"bytes,5,rep,name=cross_chain_msg,json=crossChainMsg,proto3" json:"cross_chain_msg,omitempty"`
	// first tx
	FirstTxContent *TxContentWithVerify `protobuf:"bytes,6,opt,name=first_tx_content,json=firstTxContent,proto3" json:"first_tx_content,omitempty"`
	// tx content adn verify result
	CrossChainTxContent []*TxContentWithVerify `protobuf:"bytes,7,rep,name=cross_chain_tx_content,json=crossChainTxContent,proto3" json:"cross_chain_tx_content,omitempty"`
	// cross chain result
	CrossChainResult bool `protobuf:"varint,8,opt,name=cross_chain_result,json=crossChainResult,proto3" json:"cross_chain_result,omitempty"`
	// cross chain confirm result
	GatewayConfirmResult []*CrossChainConfirm `protobuf:"bytes,9,rep,name=gateway_confirm_result,json=gatewayConfirmResult,proto3" json:"gateway_confirm_result,omitempty"`
	// cross chain state
	State CrossChainStateValue_Parameter `protobuf:"varint,10,opt,name=state,proto3,enum=syscontract.CrossChainStateValue_Parameter" json:"state,omitempty"`
	// confirm information
	ConfirmInfo *ConfirmInfo `protobuf:"bytes,11,opt,name=confirm_info,json=confirmInfo,proto3" json:"confirm_info,omitempty"`
	// cancel information
	CancelInfo *CancelInfo `protobuf:"bytes,12,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
	// confirm result
	ConfirmResult *CrossChainConfirm `protobuf:"bytes,13,opt,name=confirm_result,json=confirmResult,proto3" json:"confirm_result,omitempty"`
	// timeout
	Timeout int64 `protobuf:"varint,14,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// cross type
	CrossType CrossType_Parameter `protobuf:"varint,19,opt,name=cross_type,json=crossType,proto3,enum=syscontract.CrossType_Parameter" json:"cross_type,omitempty"`
}

func (m *CrossChainInfo) Reset()         { *m = CrossChainInfo{} }
func (m *CrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*CrossChainInfo) ProtoMessage()    {}
func (*CrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{21}
}
func (m *CrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainInfo.Merge(m, src)
}
func (m *CrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainInfo proto.InternalMessageInfo

func (m *CrossChainInfo) GetCrossChainId() string {
	if m != nil {
		return m.CrossChainId
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainName() string {
	if m != nil {
		return m.CrossChainName
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainFlag() string {
	if m != nil {
		return m.CrossChainFlag
	}
	return ""
}

func (m *CrossChainInfo) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CrossChainInfo) GetCrossChainMsg() []*CrossChainMsg {
	if m != nil {
		return m.CrossChainMsg
	}
	return nil
}

func (m *CrossChainInfo) GetFirstTxContent() *TxContentWithVerify {
	if m != nil {
		return m.FirstTxContent
	}
	return nil
}

func (m *CrossChainInfo) GetCrossChainTxContent() []*TxContentWithVerify {
	if m != nil {
		return m.CrossChainTxContent
	}
	return nil
}

func (m *CrossChainInfo) GetCrossChainResult() bool {
	if m != nil {
		return m.CrossChainResult
	}
	return false
}

func (m *CrossChainInfo) GetGatewayConfirmResult() []*CrossChainConfirm {
	if m != nil {
		return m.GatewayConfirmResult
	}
	return nil
}

func (m *CrossChainInfo) GetState() CrossChainStateValue_Parameter {
	if m != nil {
		return m.State
	}
	return CrossChainStateValue_NEW
}

func (m *CrossChainInfo) GetConfirmInfo() *ConfirmInfo {
	if m != nil {
		return m.ConfirmInfo
	}
	return nil
}

func (m *CrossChainInfo) GetCancelInfo() *CancelInfo {
	if m != nil {
		return m.CancelInfo
	}
	return nil
}

func (m *CrossChainInfo) GetConfirmResult() *CrossChainConfirm {
	if m != nil {
		return m.ConfirmResult
	}
	return nil
}

func (m *CrossChainInfo) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CrossChainInfo) GetCrossType() CrossType_Parameter {
	if m != nil {
		return m.CrossType
	}
	return CrossType_QUERY
}

type CrossChainMsg struct {
	// target gateway id
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// target chain resource id
	ChainRid string `protobuf:"bytes,2,opt,name=chain_rid,json=chainRid,proto3" json:"chain_rid,omitempty"`
	// target contract name
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// target method
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// sign identity
	Identity []string `protobuf:"bytes,5,rep,name=identity,proto3" json:"identity,omitempty"`
	// target contract parameter
	Parameter string `protobuf:"bytes,6,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// contract parameter data
	ParamData []int32 `protobuf:"varint,7,rep,packed,name=param_data,json=paramData,proto3" json:"param_data,omitempty"`
	// bcos, parameter data type
	ParamDataType []EventDataType_Parameter `protobuf:"varint,8,rep,packed,name=param_data_type,json=paramDataType,proto3,enum=syscontract.EventDataType_Parameter" json:"param_data_type,omitempty"`
	// extra data
	ExtraData string `protobuf:"bytes,9,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// confirm information
	ConfirmInfo *ConfirmInfo `protobuf:"bytes,10,opt,name=confirm_info,json=confirmInfo,proto3" json:"confirm_info,omitempty"`
	// cancel information
	CancelInfo *CancelInfo `protobuf:"bytes,11,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
	// bcos abi
	Abi string `protobuf:"bytes,12,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (m *CrossChainMsg) Reset()         { *m = CrossChainMsg{} }
func (m *CrossChainMsg) String() string { return proto.CompactTextString(m) }
func (*CrossChainMsg) ProtoMessage()    {}
func (*CrossChainMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{22}
}
func (m *CrossChainMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainMsg.Merge(m, src)
}
func (m *CrossChainMsg) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainMsg proto.InternalMessageInfo

func (m *CrossChainMsg) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *CrossChainMsg) GetChainRid() string {
	if m != nil {
		return m.ChainRid
	}
	return ""
}

func (m *CrossChainMsg) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *CrossChainMsg) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CrossChainMsg) GetIdentity() []string {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *CrossChainMsg) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *CrossChainMsg) GetParamData() []int32 {
	if m != nil {
		return m.ParamData
	}
	return nil
}

func (m *CrossChainMsg) GetParamDataType() []EventDataType_Parameter {
	if m != nil {
		return m.ParamDataType
	}
	return nil
}

func (m *CrossChainMsg) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *CrossChainMsg) GetConfirmInfo() *ConfirmInfo {
	if m != nil {
		return m.ConfirmInfo
	}
	return nil
}

func (m *CrossChainMsg) GetCancelInfo() *CancelInfo {
	if m != nil {
		return m.CancelInfo
	}
	return nil
}

func (m *CrossChainMsg) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

type TxContentWithVerify struct {
	// tx content
	TxContent *TxContent `protobuf:"bytes,1,opt,name=tx_content,json=txContent,proto3" json:"tx_content,omitempty"`
	// try result
	TryResult []string `protobuf:"bytes,2,rep,name=try_result,json=tryResult,proto3" json:"try_result,omitempty"`
	// tx verify result
	TxVerifyResult TxVerifyRsult_Parameter `protobuf:"varint,3,opt,name=tx_verify_result,json=txVerifyResult,proto3,enum=syscontract.TxVerifyRsult_Parameter" json:"tx_verify_result,omitempty"`
}

func (m *TxContentWithVerify) Reset()         { *m = TxContentWithVerify{} }
func (m *TxContentWithVerify) String() string { return proto.CompactTextString(m) }
func (*TxContentWithVerify) ProtoMessage()    {}
func (*TxContentWithVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{23}
}
func (m *TxContentWithVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContentWithVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContentWithVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContentWithVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContentWithVerify.Merge(m, src)
}
func (m *TxContentWithVerify) XXX_Size() int {
	return m.Size()
}
func (m *TxContentWithVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContentWithVerify.DiscardUnknown(m)
}

var xxx_messageInfo_TxContentWithVerify proto.InternalMessageInfo

func (m *TxContentWithVerify) GetTxContent() *TxContent {
	if m != nil {
		return m.TxContent
	}
	return nil
}

func (m *TxContentWithVerify) GetTryResult() []string {
	if m != nil {
		return m.TryResult
	}
	return nil
}

func (m *TxContentWithVerify) GetTxVerifyResult() TxVerifyRsult_Parameter {
	if m != nil {
		return m.TxVerifyResult
	}
	return TxVerifyRsult_VERIFY_SUCCESS
}

type ConfirmInfo struct {
	// chain resource id
	ChainRid string `protobuf:"bytes,2,opt,name=chain_rid,json=chainRid,proto3" json:"chain_rid,omitempty"`
	// contract name
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// method
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// parameter
	Parameter string `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// parameter data
	ParamData []int32 `protobuf:"varint,6,rep,packed,name=param_data,json=paramData,proto3" json:"param_data,omitempty"`
	// bcos, parameter data type
	ParamDataType []EventDataType_Parameter `protobuf:"varint,7,rep,packed,name=param_data_type,json=paramDataType,proto3,enum=syscontract.EventDataType_Parameter" json:"param_data_type,omitempty"`
	// extra data
	ExtraData string `protobuf:"bytes,8,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// bcos abi
	Abi string `protobuf:"bytes,9,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (m *ConfirmInfo) Reset()         { *m = ConfirmInfo{} }
func (m *ConfirmInfo) String() string { return proto.CompactTextString(m) }
func (*ConfirmInfo) ProtoMessage()    {}
func (*ConfirmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{24}
}
func (m *ConfirmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmInfo.Merge(m, src)
}
func (m *ConfirmInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmInfo proto.InternalMessageInfo

func (m *ConfirmInfo) GetChainRid() string {
	if m != nil {
		return m.ChainRid
	}
	return ""
}

func (m *ConfirmInfo) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ConfirmInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ConfirmInfo) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *ConfirmInfo) GetParamData() []int32 {
	if m != nil {
		return m.ParamData
	}
	return nil
}

func (m *ConfirmInfo) GetParamDataType() []EventDataType_Parameter {
	if m != nil {
		return m.ParamDataType
	}
	return nil
}

func (m *ConfirmInfo) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *ConfirmInfo) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

type CrossChainConfirm struct {
	// result code
	Code Code_Parameter `protobuf:"varint,1,opt,name=code,proto3,enum=syscontract.Code_Parameter" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CrossChainConfirm) Reset()         { *m = CrossChainConfirm{} }
func (m *CrossChainConfirm) String() string { return proto.CompactTextString(m) }
func (*CrossChainConfirm) ProtoMessage()    {}
func (*CrossChainConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{25}
}
func (m *CrossChainConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainConfirm.Merge(m, src)
}
func (m *CrossChainConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainConfirm proto.InternalMessageInfo

func (m *CrossChainConfirm) GetCode() Code_Parameter {
	if m != nil {
		return m.Code
	}
	return Code_GATEWAY_SUCCESS
}

func (m *CrossChainConfirm) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TxContent struct {
	// tx id
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// tx content
	Tx []byte `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	// tx result
	TxResult TxResultValue_Parameter `protobuf:"varint,3,opt,name=tx_result,json=txResult,proto3,enum=syscontract.TxResultValue_Parameter" json:"tx_result,omitempty"`
	// gateway id
	GatewayId string `protobuf:"bytes,4,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// chain resource id
	ChainRid string `protobuf:"bytes,5,opt,name=chain_rid,json=chainRid,proto3" json:"chain_rid,omitempty"`
	// tx prove json string
	TxProve string `protobuf:"bytes,6,opt,name=tx_prove,json=txProve,proto3" json:"tx_prove,omitempty"`
	// block height
	BlockHeight int64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *TxContent) Reset()         { *m = TxContent{} }
func (m *TxContent) String() string { return proto.CompactTextString(m) }
func (*TxContent) ProtoMessage()    {}
func (*TxContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{26}
}
func (m *TxContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContent.Merge(m, src)
}
func (m *TxContent) XXX_Size() int {
	return m.Size()
}
func (m *TxContent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContent.DiscardUnknown(m)
}

var xxx_messageInfo_TxContent proto.InternalMessageInfo

func (m *TxContent) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxContent) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxContent) GetTxResult() TxResultValue_Parameter {
	if m != nil {
		return m.TxResult
	}
	return TxResultValue_TX_SUCCESS
}

func (m *TxContent) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *TxContent) GetChainRid() string {
	if m != nil {
		return m.ChainRid
	}
	return ""
}

func (m *TxContent) GetTxProve() string {
	if m != nil {
		return m.TxProve
	}
	return ""
}

func (m *TxContent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type CancelInfo struct {
	// chain resource id
	ChainRid string `protobuf:"bytes,2,opt,name=chain_rid,json=chainRid,proto3" json:"chain_rid,omitempty"`
	// contract name
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// method
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// parameter
	Parameter string `protobuf:"bytes,5,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// param_data
	ParamData []int32 `protobuf:"varint,6,rep,packed,name=param_data,json=paramData,proto3" json:"param_data,omitempty"`
	// bcos param data type
	ParamDataType []EventDataType_Parameter `protobuf:"varint,7,rep,packed,name=param_data_type,json=paramDataType,proto3,enum=syscontract.EventDataType_Parameter" json:"param_data_type,omitempty"`
	// extra data
	ExtraData string `protobuf:"bytes,8,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// bcos abi
	Abi string `protobuf:"bytes,9,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (m *CancelInfo) Reset()         { *m = CancelInfo{} }
func (m *CancelInfo) String() string { return proto.CompactTextString(m) }
func (*CancelInfo) ProtoMessage()    {}
func (*CancelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{27}
}
func (m *CancelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelInfo.Merge(m, src)
}
func (m *CancelInfo) XXX_Size() int {
	return m.Size()
}
func (m *CancelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CancelInfo proto.InternalMessageInfo

func (m *CancelInfo) GetChainRid() string {
	if m != nil {
		return m.ChainRid
	}
	return ""
}

func (m *CancelInfo) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *CancelInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CancelInfo) GetParameter() string {
	if m != nil {
		return m.Parameter
	}
	return ""
}

func (m *CancelInfo) GetParamData() []int32 {
	if m != nil {
		return m.ParamData
	}
	return nil
}

func (m *CancelInfo) GetParamDataType() []EventDataType_Parameter {
	if m != nil {
		return m.ParamDataType
	}
	return nil
}

func (m *CancelInfo) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *CancelInfo) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

type CrossChainTxUpChain struct {
	// confirm index
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// tx content and verify result
	TxContentWithVerify *TxContentWithVerify `protobuf:"bytes,2,opt,name=tx_content_with_verify,json=txContentWithVerify,proto3" json:"tx_content_with_verify,omitempty"`
}

func (m *CrossChainTxUpChain) Reset()         { *m = CrossChainTxUpChain{} }
func (m *CrossChainTxUpChain) String() string { return proto.CompactTextString(m) }
func (*CrossChainTxUpChain) ProtoMessage()    {}
func (*CrossChainTxUpChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{28}
}
func (m *CrossChainTxUpChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTxUpChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTxUpChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTxUpChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTxUpChain.Merge(m, src)
}
func (m *CrossChainTxUpChain) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTxUpChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTxUpChain.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTxUpChain proto.InternalMessageInfo

func (m *CrossChainTxUpChain) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CrossChainTxUpChain) GetTxContentWithVerify() *TxContentWithVerify {
	if m != nil {
		return m.TxContentWithVerify
	}
	return nil
}

type CrossChainConfirmUpChain struct {
	// confirm index
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// confirm result
	CrossChainConfirm *CrossChainConfirm `protobuf:"bytes,2,opt,name=cross_chain_confirm,json=crossChainConfirm,proto3" json:"cross_chain_confirm,omitempty"`
}

func (m *CrossChainConfirmUpChain) Reset()         { *m = CrossChainConfirmUpChain{} }
func (m *CrossChainConfirmUpChain) String() string { return proto.CompactTextString(m) }
func (*CrossChainConfirmUpChain) ProtoMessage()    {}
func (*CrossChainConfirmUpChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cf48d3b8e0203c7, []int{29}
}
func (m *CrossChainConfirmUpChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainConfirmUpChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainConfirmUpChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainConfirmUpChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainConfirmUpChain.Merge(m, src)
}
func (m *CrossChainConfirmUpChain) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainConfirmUpChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainConfirmUpChain.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainConfirmUpChain proto.InternalMessageInfo

func (m *CrossChainConfirmUpChain) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CrossChainConfirmUpChain) GetCrossChainConfirm() *CrossChainConfirm {
	if m != nil {
		return m.CrossChainConfirm
	}
	return nil
}

func init() {
	proto.RegisterEnum("syscontract.RelayCrossFunction", RelayCrossFunction_name, RelayCrossFunction_value)
	proto.RegisterEnum("syscontract.SaveGateway_Parameter", SaveGateway_Parameter_name, SaveGateway_Parameter_value)
	proto.RegisterEnum("syscontract.UpdateGateway_Parameter", UpdateGateway_Parameter_name, UpdateGateway_Parameter_value)
	proto.RegisterEnum("syscontract.GetGateway_Parameter", GetGateway_Parameter_name, GetGateway_Parameter_value)
	proto.RegisterEnum("syscontract.GetGatewayByRange_Parameter", GetGatewayByRange_Parameter_name, GetGatewayByRange_Parameter_value)
	proto.RegisterEnum("syscontract.SaveCrossChainInfo_Parameter", SaveCrossChainInfo_Parameter_name, SaveCrossChainInfo_Parameter_value)
	proto.RegisterEnum("syscontract.UpdateCrossChainTry_Parameter", UpdateCrossChainTry_Parameter_name, UpdateCrossChainTry_Parameter_value)
	proto.RegisterEnum("syscontract.UpdateCrossChainResult_Parameter", UpdateCrossChainResult_Parameter_name, UpdateCrossChainResult_Parameter_value)
	proto.RegisterEnum("syscontract.DeleteErrorCrossChainTxList_Parameter", DeleteErrorCrossChainTxList_Parameter_name, DeleteErrorCrossChainTxList_Parameter_value)
	proto.RegisterEnum("syscontract.UpdateCrossChainConfirm_Parameter", UpdateCrossChainConfirm_Parameter_name, UpdateCrossChainConfirm_Parameter_value)
	proto.RegisterEnum("syscontract.UpdateSrcGatewayConfirm_Parameter", UpdateSrcGatewayConfirm_Parameter_name, UpdateSrcGatewayConfirm_Parameter_value)
	proto.RegisterEnum("syscontract.GetCrossChainInfo_Parameter", GetCrossChainInfo_Parameter_name, GetCrossChainInfo_Parameter_value)
	proto.RegisterEnum("syscontract.GetCrossChainInfoByRange_Parameter", GetCrossChainInfoByRange_Parameter_name, GetCrossChainInfoByRange_Parameter_value)
	proto.RegisterEnum("syscontract.SetCrossAdmin_Parameter", SetCrossAdmin_Parameter_name, SetCrossAdmin_Parameter_value)
	proto.RegisterEnum("syscontract.DeleteCrossAdmin_Parameter", DeleteCrossAdmin_Parameter_name, DeleteCrossAdmin_Parameter_value)
	proto.RegisterEnum("syscontract.EventDataType_Parameter", EventDataType_Parameter_name, EventDataType_Parameter_value)
	proto.RegisterEnum("syscontract.Code_Parameter", Code_Parameter_name, Code_Parameter_value)
	proto.RegisterEnum("syscontract.CrossType_Parameter", CrossType_Parameter_name, CrossType_Parameter_value)
	proto.RegisterEnum("syscontract.TxResultValue_Parameter", TxResultValue_Parameter_name, TxResultValue_Parameter_value)
	proto.RegisterEnum("syscontract.TxVerifyRsult_Parameter", TxVerifyRsult_Parameter_name, TxVerifyRsult_Parameter_value)
	proto.RegisterEnum("syscontract.CrossChainStateValue_Parameter", CrossChainStateValue_Parameter_name, CrossChainStateValue_Parameter_value)
	proto.RegisterEnum("syscontract.EventName_Parameter", EventName_Parameter_name, EventName_Parameter_value)
	proto.RegisterType((*SaveGateway)(nil), "syscontract.SaveGateway")
	proto.RegisterType((*UpdateGateway)(nil), "syscontract.UpdateGateway")
	proto.RegisterType((*GetGateway)(nil), "syscontract.GetGateway")
	proto.RegisterType((*GetGatewayByRange)(nil), "syscontract.GetGatewayByRange")
	proto.RegisterType((*SaveCrossChainInfo)(nil), "syscontract.SaveCrossChainInfo")
	proto.RegisterType((*UpdateCrossChainTry)(nil), "syscontract.UpdateCrossChainTry")
	proto.RegisterType((*UpdateCrossChainResult)(nil), "syscontract.UpdateCrossChainResult")
	proto.RegisterType((*DeleteErrorCrossChainTxList)(nil), "syscontract.DeleteErrorCrossChainTxList")
	proto.RegisterType((*UpdateCrossChainConfirm)(nil), "syscontract.UpdateCrossChainConfirm")
	proto.RegisterType((*UpdateSrcGatewayConfirm)(nil), "syscontract.UpdateSrcGatewayConfirm")
	proto.RegisterType((*GetCrossChainInfo)(nil), "syscontract.GetCrossChainInfo")
	proto.RegisterType((*GetCrossChainInfoByRange)(nil), "syscontract.GetCrossChainInfoByRange")
	proto.RegisterType((*SetCrossAdmin)(nil), "syscontract.SetCrossAdmin")
	proto.RegisterType((*DeleteCrossAdmin)(nil), "syscontract.DeleteCrossAdmin")
	proto.RegisterType((*EventDataType)(nil), "syscontract.EventDataType")
	proto.RegisterType((*Code)(nil), "syscontract.Code")
	proto.RegisterType((*CrossType)(nil), "syscontract.CrossType")
	proto.RegisterType((*TxResultValue)(nil), "syscontract.TxResultValue")
	proto.RegisterType((*TxVerifyRsult)(nil), "syscontract.TxVerifyRsult")
	proto.RegisterType((*CrossChainStateValue)(nil), "syscontract.CrossChainStateValue")
	proto.RegisterType((*EventName)(nil), "syscontract.EventName")
	proto.RegisterType((*CrossChainInfo)(nil), "syscontract.CrossChainInfo")
	proto.RegisterType((*CrossChainMsg)(nil), "syscontract.CrossChainMsg")
	proto.RegisterType((*TxContentWithVerify)(nil), "syscontract.TxContentWithVerify")
	proto.RegisterType((*ConfirmInfo)(nil), "syscontract.ConfirmInfo")
	proto.RegisterType((*CrossChainConfirm)(nil), "syscontract.CrossChainConfirm")
	proto.RegisterType((*TxContent)(nil), "syscontract.TxContent")
	proto.RegisterType((*CancelInfo)(nil), "syscontract.CancelInfo")
	proto.RegisterType((*CrossChainTxUpChain)(nil), "syscontract.CrossChainTxUpChain")
	proto.RegisterType((*CrossChainConfirmUpChain)(nil), "syscontract.CrossChainConfirmUpChain")
}

func init() { proto.RegisterFile("syscontract/relay_cross.proto", fileDescriptor_6cf48d3b8e0203c7) }

var fileDescriptor_6cf48d3b8e0203c7 = []byte{
	// 1979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x73, 0xe3, 0x48,
	0x15, 0x8f, 0xfc, 0xad, 0xe7, 0xd8, 0xe9, 0xb4, 0x67, 0x33, 0x9e, 0x99, 0x4d, 0xd6, 0xab, 0x9d,
	0xa2, 0xc2, 0x57, 0x52, 0x64, 0x59, 0x98, 0x2a, 0x60, 0x29, 0xc5, 0x56, 0x12, 0xb1, 0x8e, 0xec,
	0x6d, 0xc9, 0xf9, 0xd8, 0x03, 0x2a, 0xc5, 0x56, 0x1c, 0xb3, 0xb1, 0x15, 0xe4, 0x9e, 0xac, 0x5d,
	0x5c, 0x28, 0xfe, 0x02, 0x4e, 0x1c, 0x39, 0xc0, 0x81, 0x3f, 0x82, 0x33, 0x55, 0x1c, 0xf7, 0xb6,
	0x1c, 0xa9, 0x99, 0xda, 0x23, 0x27, 0xfe, 0x01, 0xaa, 0x5b, 0x92, 0xd5, 0x52, 0x3c, 0xc9, 0x50,
	0xc0, 0x8d, 0x9b, 0xfa, 0x7d, 0xf5, 0xeb, 0xf7, 0x7e, 0xef, 0x75, 0x3f, 0xc1, 0xe6, 0x74, 0x3e,
	0xed, 0x7b, 0x13, 0xea, 0x3b, 0x7d, 0xba, 0xeb, 0xbb, 0xd7, 0xce, 0xdc, 0xee, 0xfb, 0xde, 0x74,
	0xba, 0x73, 0xe3, 0x7b, 0xd4, 0xc3, 0x65, 0x81, 0xad, 0x7c, 0x0f, 0xca, 0xa6, 0x73, 0xeb, 0x1e,
	0x3a, 0xd4, 0xfd, 0xc2, 0x99, 0x2b, 0x0a, 0xc8, 0x5d, 0xc7, 0x77, 0xc6, 0x2e, 0x75, 0x7d, 0xfc,
	0x0e, 0xac, 0x1f, 0xaa, 0x96, 0x76, 0xaa, 0x9e, 0xdb, 0xba, 0x71, 0xd0, 0xb1, 0xf7, 0xcf, 0x2d,
	0x0d, 0xad, 0x28, 0x4d, 0xa8, 0xf4, 0x6e, 0x06, 0x0e, 0x5d, 0x28, 0xed, 0x89, 0x4a, 0x55, 0x80,
	0x85, 0x52, 0x0b, 0xad, 0x2c, 0x37, 0x22, 0x29, 0xdf, 0x04, 0x38, 0x74, 0x69, 0x64, 0xe1, 0xd9,
	0x3d, 0x16, 0x94, 0x4f, 0x60, 0x3d, 0x16, 0xdd, 0x9f, 0x13, 0x67, 0x32, 0x74, 0x95, 0x1f, 0x88,
	0x1a, 0x8f, 0x00, 0x99, 0x96, 0x4a, 0x2c, 0x3b, 0xb1, 0x73, 0x0d, 0xd6, 0x4c, 0xab, 0xd3, 0x15,
	0x89, 0x92, 0xf2, 0x63, 0xc0, 0xec, 0xbc, 0x4d, 0x16, 0x8f, 0xe6, 0x95, 0x33, 0x9a, 0xe8, 0x93,
	0x4b, 0x4f, 0xf9, 0x86, 0x68, 0xed, 0x09, 0xbc, 0xd3, 0x24, 0x1d, 0xd3, 0xb4, 0x9b, 0x47, 0xaa,
	0x6e, 0x24, 0x8e, 0xde, 0x81, 0x5a, 0x70, 0xf4, 0x58, 0xdf, 0xf2, 0xe7, 0xca, 0x0b, 0x51, 0x1d,
	0x43, 0x35, 0xa1, 0xce, 0x5c, 0x79, 0x0c, 0x35, 0x91, 0x66, 0x9d, 0x45, 0x61, 0xf8, 0x14, 0x36,
	0xd2, 0x06, 0x89, 0x3b, 0x7d, 0x79, 0x4d, 0x95, 0x1f, 0x3e, 0x64, 0x73, 0x03, 0xb0, 0x48, 0x23,
	0x9a, 0xd9, 0x6b, 0x5b, 0x48, 0x52, 0x3e, 0x86, 0x67, 0x2d, 0xf7, 0xda, 0xa5, 0xae, 0xe6, 0xfb,
	0x9e, 0x2f, 0x38, 0x3a, 0x6b, 0x8f, 0xa6, 0x54, 0x79, 0xef, 0x01, 0xbb, 0xca, 0x19, 0x3c, 0x4e,
	0xbb, 0xd4, 0xf4, 0x26, 0x97, 0x23, 0x7f, 0xac, 0xfc, 0xe4, 0x21, 0x9f, 0xde, 0x85, 0xba, 0x48,
	0x6b, 0x76, 0x8c, 0x03, 0x9d, 0x1c, 0x47, 0x87, 0x35, 0x22, 0xcb, 0xa6, 0xdf, 0x0f, 0xd3, 0x19,
	0x59, 0xfe, 0xf0, 0x21, 0xcb, 0x8c, 0x16, 0x5a, 0x5b, 0x9c, 0xf4, 0xfb, 0x1c, 0x18, 0xa9, 0x54,
	0x3e, 0x78, 0xbe, 0xcf, 0xa0, 0x7e, 0x47, 0x2b, 0x42, 0xd5, 0xc7, 0xa2, 0x72, 0x1d, 0x1e, 0x05,
	0xa8, 0x5a, 0x96, 0x4e, 0x8e, 0xac, 0x14, 0x43, 0x52, 0x3e, 0x82, 0x8a, 0x19, 0xda, 0x56, 0x07,
	0xe3, 0xd1, 0x44, 0x79, 0x2e, 0x1a, 0x5c, 0xa0, 0x40, 0x6d, 0x1d, 0xeb, 0x86, 0xad, 0xb6, 0x5a,
	0x44, 0x33, 0x4d, 0xb4, 0xa2, 0xbc, 0x00, 0x14, 0xa4, 0xec, 0xdf, 0xd6, 0xfc, 0x15, 0x54, 0xb4,
	0x5b, 0x77, 0x42, 0x5b, 0x0e, 0x75, 0xac, 0xf9, 0x8d, 0xab, 0xfc, 0x42, 0x54, 0x03, 0x28, 0x98,
	0x16, 0xd1, 0x8d, 0x43, 0xb4, 0x82, 0x8b, 0x90, 0x3d, 0x56, 0xbb, 0x48, 0xc2, 0x25, 0xc8, 0xf1,
	0x7c, 0x64, 0xf8, 0x57, 0xa7, 0xd3, 0x46, 0x59, 0xc6, 0xd4, 0x0d, 0x0b, 0xe5, 0xb0, 0x0c, 0xf9,
	0x83, 0x76, 0x47, 0xb5, 0x50, 0x9e, 0x7d, 0xaa, 0x84, 0xa8, 0xe7, 0xa8, 0xc0, 0x04, 0x8f, 0x54,
	0xf3, 0x08, 0x15, 0x71, 0x19, 0x8a, 0xd1, 0xe6, 0x25, 0xe5, 0x4f, 0x12, 0xe4, 0x9a, 0xde, 0xc0,
	0x55, 0x7e, 0x2f, 0x89, 0xbb, 0xd6, 0x60, 0x2d, 0x2a, 0x39, 0xb3, 0xd7, 0x6c, 0x72, 0x47, 0x45,
	0xa2, 0xa5, 0x1f, 0x6b, 0x9d, 0x9e, 0x85, 0x24, 0xd6, 0x1b, 0x74, 0xe3, 0x44, 0x6d, 0xeb, 0x2d,
	0xbb, 0xab, 0x12, 0xf5, 0x58, 0xb3, 0x34, 0x82, 0x32, 0x2c, 0x6b, 0xd6, 0x99, 0xdd, 0x25, 0x9d,
	0x13, 0xcd, 0xd6, 0x08, 0xe9, 0x10, 0x94, 0xc5, 0xeb, 0x50, 0x69, 0x76, 0x0c, 0x8b, 0xa8, 0x4d,
	0xcb, 0x3e, 0x50, 0xf5, 0x36, 0xca, 0x31, 0x31, 0xdd, 0xb0, 0x34, 0x62, 0xa8, 0xed, 0x50, 0x2c,
	0xcf, 0x2c, 0x12, 0xad, 0xad, 0x9e, 0x87, 0x49, 0x09, 0xc8, 0x05, 0x65, 0x17, 0x64, 0x1e, 0x5a,
	0x1e, 0xa2, 0x44, 0x8f, 0x93, 0x21, 0xff, 0x69, 0x4f, 0x23, 0xe7, 0x68, 0x85, 0x45, 0x4b, 0x37,
	0x4e, 0x3a, 0x9f, 0x30, 0xa8, 0x7e, 0x25, 0x41, 0xc5, 0x9a, 0x05, 0xa5, 0x78, 0xe2, 0x5c, 0xbf,
	0x74, 0x95, 0xbf, 0x48, 0xa9, 0x1e, 0x65, 0x9d, 0x09, 0xc7, 0x0b, 0xd6, 0xf1, 0xc9, 0xca, 0x50,
	0xb4, 0xce, 0x02, 0x47, 0x33, 0x18, 0xc1, 0xaa, 0x75, 0x66, 0x1b, 0x1d, 0xcb, 0xd6, 0xce, 0x74,
	0xd3, 0x42, 0x59, 0xe6, 0x26, 0xa7, 0xd8, 0x5d, 0x8d, 0x1c, 0xeb, 0xa6, 0xa9, 0x77, 0x0c, 0x13,
	0xe5, 0xc4, 0x5e, 0xc9, 0xa4, 0x0f, 0x3a, 0x3d, 0xa3, 0x85, 0xf2, 0xf8, 0x29, 0x6c, 0x44, 0xe4,
	0xae, 0x6e, 0x1c, 0x76, 0x3b, 0xc6, 0x61, 0x74, 0x32, 0xd6, 0xfa, 0x82, 0xa3, 0x32, 0x4e, 0x48,
	0x2d, 0xb2, 0x16, 0x66, 0x92, 0xe6, 0xa2, 0xf3, 0x1d, 0x6a, 0x56, 0xc8, 0x2a, 0x29, 0xe7, 0xec,
	0x60, 0x27, 0xae, 0x3f, 0xba, 0x9c, 0x13, 0xde, 0x68, 0x8e, 0x52, 0x05, 0x73, 0xa2, 0x11, 0xfd,
	0x40, 0x4c, 0x5d, 0x4c, 0x0b, 0x93, 0x85, 0x24, 0x96, 0xce, 0x90, 0xc6, 0x1c, 0x35, 0x34, 0xad,
	0x85, 0x32, 0xca, 0x2f, 0xe1, 0x51, 0x5c, 0x56, 0x26, 0x75, 0xa8, 0x1b, 0x84, 0xee, 0x5c, 0xdc,
	0xa1, 0x08, 0x59, 0x43, 0x3b, 0x45, 0x2b, 0x2c, 0x2a, 0xa7, 0xaa, 0xce, 0x62, 0xa2, 0x35, 0x7b,
	0xac, 0x3f, 0x2c, 0x28, 0x61, 0xa1, 0xa3, 0x0c, 0x5e, 0x83, 0x72, 0x54, 0xf5, 0x9a, 0xd1, 0x42,
	0x59, 0x16, 0xe7, 0xa6, 0x6a, 0x34, 0xb5, 0x36, 0x5f, 0xe7, 0x94, 0x7f, 0x4a, 0x20, 0xf3, 0x02,
	0x30, 0x9c, 0xb1, 0xab, 0x7c, 0x9d, 0xc6, 0xa1, 0xa1, 0x9d, 0x8a, 0x45, 0xba, 0xa4, 0x13, 0x93,
	0x73, 0x6e, 0x49, 0x62, 0xed, 0xb4, 0xd7, 0x55, 0x5b, 0xaa, 0xa5, 0x85, 0x0d, 0x86, 0xd3, 0x33,
	0x4c, 0x21, 0x0a, 0x63, 0xd2, 0x95, 0x67, 0xf0, 0x58, 0x8c, 0xb1, 0xc8, 0xcc, 0xf1, 0xbb, 0x47,
	0x8b, 0x3a, 0x07, 0x2f, 0x5a, 0x94, 0x67, 0x5b, 0xb4, 0xb4, 0xb6, 0x66, 0x69, 0x09, 0x7a, 0x81,
	0xa5, 0x3d, 0x76, 0x34, 0xb4, 0x87, 0x8a, 0xac, 0xff, 0x24, 0x48, 0x76, 0xaf, 0xcb, 0xdc, 0x43,
	0x25, 0xe5, 0xeb, 0x02, 0x54, 0x93, 0x0d, 0x0c, 0x3f, 0x87, 0x2a, 0xbf, 0xe3, 0xed, 0x3e, 0x23,
	0xd9, 0xa3, 0x41, 0x5d, 0x6a, 0x48, 0xdb, 0x32, 0x59, 0xed, 0xc7, 0x72, 0x03, 0xbc, 0x0d, 0x48,
	0x94, 0x9a, 0x38, 0x63, 0xb7, 0x9e, 0xe1, 0x72, 0xd5, 0x58, 0x8e, 0x85, 0x32, 0x2d, 0x79, 0x79,
	0xed, 0x0c, 0xeb, 0xd9, 0xb4, 0xe4, 0xc1, 0xb5, 0x33, 0xc4, 0x18, 0x72, 0x97, 0xbe, 0x37, 0xae,
	0xe7, 0x38, 0x97, 0x7f, 0xe3, 0x7d, 0x58, 0x13, 0xb5, 0xc7, 0xd3, 0x61, 0x3d, 0xdf, 0xc8, 0x6e,
	0x97, 0xf7, 0x9e, 0xee, 0x08, 0x8f, 0x8f, 0x9d, 0xf8, 0x0c, 0xc7, 0xd3, 0x21, 0xa9, 0xf4, 0xc5,
	0x25, 0xfe, 0x19, 0xa0, 0xcb, 0x91, 0x3f, 0xa5, 0x36, 0x9d, 0xd9, 0x4c, 0xc3, 0x9d, 0xd0, 0x7a,
	0xa1, 0x21, 0x6d, 0x97, 0xf7, 0x1a, 0x09, 0x23, 0xd6, 0xac, 0x19, 0x70, 0x4f, 0x47, 0xf4, 0x2a,
	0x04, 0x76, 0x95, 0x6b, 0x2e, 0x38, 0xb8, 0x07, 0x1b, 0xa2, 0x3f, 0x82, 0xc5, 0x22, 0x77, 0xeb,
	0x61, 0x8b, 0xb5, 0xbe, 0x70, 0x91, 0x46, 0x66, 0xbf, 0x03, 0x58, 0x34, 0xeb, 0xf3, 0x76, 0x51,
	0x2f, 0x35, 0xa4, 0xed, 0x12, 0x41, 0xfd, 0xd4, 0x8d, 0x8e, 0x2d, 0xd8, 0x18, 0x06, 0xb7, 0x1e,
	0xdb, 0x9d, 0x5d, 0x7b, 0x91, 0x86, 0xcc, 0x9d, 0xd8, 0x7a, 0x43, 0x6c, 0xc2, 0x3b, 0x92, 0x3c,
	0x1a, 0x26, 0xee, 0xcc, 0xd0, 0xaa, 0x0a, 0xf9, 0x29, 0x2b, 0xb5, 0x3a, 0x34, 0xa4, 0xed, 0xea,
	0xde, 0xb7, 0xdf, 0x60, 0x24, 0x2e, 0xc7, 0x9d, 0x45, 0x85, 0x90, 0x40, 0x13, 0xff, 0x08, 0x56,
	0x23, 0x87, 0x46, 0x93, 0x4b, 0xaf, 0x5e, 0xe6, 0x51, 0xae, 0x27, 0x2d, 0x05, 0x02, 0x0c, 0x6b,
	0xa4, 0xdc, 0x8f, 0x17, 0xf8, 0x05, 0x94, 0xfb, 0xce, 0xa4, 0xef, 0x5e, 0x07, 0xba, 0xab, 0x5c,
	0xf7, 0x71, 0x52, 0x97, 0xf3, 0xb9, 0x2a, 0xf4, 0x17, 0xdf, 0x58, 0x83, 0x6a, 0x2a, 0x0e, 0x15,
	0xae, 0xfc, 0x50, 0x1c, 0x2a, 0xfd, 0x44, 0x00, 0xea, 0x50, 0xa4, 0xa3, 0xb1, 0xeb, 0xbd, 0xa4,
	0xf5, 0x6a, 0x43, 0xda, 0xce, 0x92, 0x68, 0x89, 0x7f, 0x0a, 0x10, 0xa4, 0x87, 0xce, 0x6f, 0xdc,
	0x7a, 0x8d, 0xc7, 0xa7, 0x71, 0xd7, 0x38, 0xbb, 0x14, 0x84, 0xa0, 0xc8, 0xfd, 0xc5, 0x4d, 0xf1,
	0x55, 0x16, 0x2a, 0x09, 0x8c, 0xe2, 0x4d, 0x80, 0x28, 0x87, 0x8b, 0x12, 0x93, 0x43, 0x8a, 0x3e,
	0xc0, 0xcf, 0x40, 0x0e, 0xa1, 0x30, 0x1a, 0x84, 0x85, 0x55, 0xe2, 0x04, 0x32, 0x1a, 0xe0, 0x0f,
	0xa0, 0x12, 0x6d, 0x1c, 0x54, 0x5e, 0x36, 0xac, 0xd0, 0x90, 0xc8, 0xeb, 0x6e, 0x03, 0x0a, 0x63,
	0x97, 0x5e, 0x79, 0x83, 0xb0, 0x9e, 0xc2, 0x15, 0x7e, 0x0a, 0xa5, 0xd1, 0xc0, 0x9d, 0xd0, 0x11,
	0x9d, 0xf3, 0x52, 0x92, 0xc9, 0x62, 0x8d, 0xdf, 0x05, 0xf9, 0x26, 0x72, 0x9f, 0x97, 0x88, 0x4c,
	0x62, 0x02, 0x73, 0x99, 0x2f, 0xec, 0x81, 0x43, 0x1d, 0x8e, 0xf7, 0x7c, 0xc8, 0x66, 0x8f, 0x06,
	0xdc, 0x86, 0xb5, 0x98, 0x1d, 0x44, 0xaa, 0xd4, 0xc8, 0x6e, 0x57, 0xf7, 0x9e, 0x27, 0x22, 0x95,
	0x78, 0x65, 0x08, 0xd1, 0xaa, 0x2c, 0x2c, 0x31, 0x06, 0xdb, 0xcc, 0x9d, 0x51, 0xdf, 0x09, 0x36,
	0x93, 0x03, 0x5f, 0x38, 0x85, 0x6f, 0x96, 0x46, 0x1a, 0xfc, 0x07, 0x48, 0x2b, 0xbf, 0x3d, 0xd2,
	0x10, 0x64, 0x9d, 0x8b, 0x11, 0xc7, 0xa6, 0x4c, 0xd8, 0xa7, 0xf2, 0x67, 0x09, 0x6a, 0x4b, 0xca,
	0x1c, 0x7f, 0x04, 0x20, 0x34, 0x07, 0x89, 0x6f, 0xb1, 0xb1, 0xbc, 0x39, 0x10, 0x99, 0x2e, 0x1a,
	0xc1, 0x26, 0x00, 0xf5, 0xe7, 0x11, 0x8c, 0x33, 0x3c, 0x3f, 0x32, 0xf5, 0xe7, 0x21, 0x44, 0x0d,
	0x40, 0x74, 0x66, 0xdf, 0xf2, 0x2d, 0x22, 0xa1, 0x2c, 0x87, 0xe3, 0xf3, 0x94, 0x6d, 0xe1, 0x62,
	0x16, 0x82, 0x5c, 0xa5, 0x11, 0x23, 0x98, 0x0d, 0xfe, 0x98, 0x81, 0xb2, 0x10, 0xa6, 0xff, 0x21,
	0xec, 0x12, 0xd0, 0xca, 0xdf, 0x0f, 0xad, 0xc2, 0x5b, 0x40, 0xab, 0xf8, 0xdf, 0x82, 0x56, 0x29,
	0x0d, 0xad, 0x30, 0xc7, 0x72, 0x9c, 0xe3, 0x9f, 0xc3, 0xfa, 0x9d, 0xe6, 0x81, 0x77, 0x21, 0xd7,
	0xf7, 0x06, 0x2e, 0x4f, 0x6d, 0x75, 0xef, 0x59, 0x0a, 0x79, 0x03, 0x71, 0x7f, 0x2e, 0xc8, 0xda,
	0xcb, 0xd8, 0x9d, 0x4e, 0x9d, 0x61, 0x74, 0x53, 0x46, 0x4b, 0xe5, 0x1f, 0x12, 0xc8, 0xf1, 0x5d,
	0x50, 0x83, 0x3c, 0x9d, 0xc5, 0x4d, 0x21, 0x47, 0x67, 0xfa, 0x00, 0x57, 0x21, 0x43, 0x67, 0x5c,
	0x6f, 0x95, 0x64, 0xe8, 0x0c, 0xab, 0x20, 0xd3, 0xd9, 0xfd, 0x08, 0x10, 0xde, 0x9c, 0x82, 0x2f,
	0x25, 0x1a, 0x32, 0x52, 0x1d, 0x28, 0x77, 0x6f, 0x07, 0xca, 0xa7, 0xa0, 0xf0, 0x04, 0x4a, 0x74,
	0x66, 0xdf, 0xf8, 0xde, 0xad, 0x1b, 0xf6, 0x89, 0x22, 0x9d, 0x75, 0xd9, 0x12, 0xbf, 0x0f, 0xab,
	0x17, 0xd7, 0x5e, 0xff, 0x73, 0xfb, 0xca, 0x1d, 0x0d, 0xaf, 0xd8, 0xbd, 0xc8, 0x5a, 0x69, 0x99,
	0xd3, 0x8e, 0x38, 0x49, 0xf9, 0x43, 0x06, 0x20, 0x2e, 0xb0, 0xff, 0x83, 0x6e, 0x29, 0xe8, 0x7e,
	0x23, 0x41, 0x4d, 0x9c, 0xb9, 0x7b, 0x37, 0xfc, 0x03, 0x3f, 0x82, 0xfc, 0x68, 0x32, 0x70, 0x67,
	0x1c, 0x1e, 0x79, 0x12, 0x2c, 0xd8, 0xbb, 0x24, 0x6e, 0x37, 0xf6, 0x17, 0x23, 0x7a, 0x15, 0x76,
	0x09, 0x1e, 0xd0, 0xb7, 0x7a, 0x97, 0xd0, 0xbb, 0x44, 0xe5, 0xd7, 0x12, 0xd4, 0xef, 0x40, 0xff,
	0x7e, 0x4f, 0x0c, 0xa8, 0x89, 0x4f, 0x99, 0xb0, 0xef, 0x86, 0x6e, 0x3c, 0x74, 0x23, 0xaf, 0xf7,
	0xd3, 0xa4, 0x6f, 0xfd, 0x2e, 0x07, 0x98, 0xb8, 0xd7, 0xce, 0x9c, 0x4b, 0x1f, 0xbc, 0x9c, 0xf4,
	0xe9, 0xc8, 0x9b, 0xb0, 0x27, 0xbe, 0xa9, 0x9e, 0x68, 0x8b, 0x57, 0x2e, 0x9f, 0x2e, 0x82, 0x77,
	0xed, 0x82, 0x26, 0xf1, 0xf1, 0x85, 0x49, 0xa5, 0x7f, 0xc3, 0xa0, 0x0c, 0x7e, 0x1f, 0x36, 0x17,
	0xd3, 0x8c, 0x9d, 0xfa, 0xa7, 0xd2, 0x0e, 0x86, 0xab, 0xe7, 0xd0, 0x08, 0x9f, 0xd9, 0x6f, 0x96,
	0xca, 0xb1, 0xa1, 0x2a, 0xdc, 0x37, 0x35, 0x0f, 0xa0, 0x3c, 0xde, 0x84, 0x27, 0x4b, 0x78, 0xe1,
	0x7f, 0x87, 0x02, 0xde, 0x82, 0xa7, 0x4b, 0xd8, 0xd1, 0xd4, 0x52, 0x14, 0xf8, 0x4b, 0x06, 0x04,
	0x54, 0xe2, 0xb3, 0xb0, 0x16, 0xff, 0xac, 0x32, 0x7a, 0xc7, 0x48, 0x66, 0xa3, 0x8e, 0x40, 0x44,
	0xc0, 0x9e, 0xff, 0xa2, 0xd4, 0xfe, 0xb9, 0x4d, 0x54, 0xe3, 0x50, 0x43, 0x65, 0x3e, 0x92, 0x68,
	0xc9, 0xdf, 0x12, 0xcc, 0xc6, 0x6a, 0xa4, 0x72, 0x27, 0x6c, 0x95, 0x28, 0x6c, 0x4b, 0xfe, 0x6b,
	0x85, 0x56, 0xab, 0xf8, 0x03, 0x78, 0x8f, 0x89, 0xf0, 0x31, 0xd5, 0x68, 0x2d, 0x44, 0x75, 0xd5,
	0xb0, 0xf5, 0x56, 0x10, 0xb5, 0xb5, 0x65, 0x73, 0x0d, 0x62, 0xfe, 0xa4, 0xe6, 0x1a, 0x8d, 0x31,
	0xd6, 0xf9, 0x84, 0x6e, 0x26, 0x84, 0xf1, 0xfe, 0xf0, 0xaf, 0xaf, 0xb6, 0xa4, 0x2f, 0x5f, 0x6d,
	0x49, 0x7f, 0x7f, 0xb5, 0x25, 0xfd, 0xf6, 0xf5, 0xd6, 0xca, 0x97, 0xaf, 0xb7, 0x56, 0xfe, 0xf6,
	0x7a, 0x6b, 0x05, 0x36, 0x3d, 0x7f, 0xb8, 0xc3, 0xe1, 0x37, 0x76, 0x3e, 0x77, 0xfd, 0x9d, 0x9b,
	0x0b, 0x11, 0x76, 0x9f, 0x89, 0x2c, 0xcf, 0x1f, 0xee, 0xc6, 0xcb, 0xdd, 0x9b, 0x8b, 0xef, 0x0e,
	0xbd, 0xdd, 0xdb, 0xbd, 0x5d, 0x41, 0xfe, 0xa2, 0xc0, 0xff, 0x76, 0x7e, 0xf8, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x95, 0x61, 0xda, 0x85, 0x0e, 0x15, 0x00, 0x00,
}

func (m *SaveGateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateGateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetGateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetGatewayByRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayByRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGatewayByRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SaveCrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveCrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveCrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateCrossChainTry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCrossChainTry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCrossChainTry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateCrossChainResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCrossChainResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCrossChainResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteErrorCrossChainTxList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteErrorCrossChainTxList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteErrorCrossChainTxList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateCrossChainConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCrossChainConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCrossChainConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateSrcGatewayConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSrcGatewayConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSrcGatewayConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCrossChainInfoByRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCrossChainInfoByRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCrossChainInfoByRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetCrossAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCrossAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCrossAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteCrossAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCrossAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCrossAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventDataType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDataType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Code) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Code) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Code) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CrossType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TxResultValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResultValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResultValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TxVerifyRsult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxVerifyRsult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxVerifyRsult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CrossChainStateValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainStateValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainStateValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossType != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.CrossType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Timeout != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x70
	}
	if m.ConfirmResult != nil {
		{
			size, err := m.ConfirmResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CancelInfo != nil {
		{
			size, err := m.CancelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ConfirmInfo != nil {
		{
			size, err := m.ConfirmInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.State != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if len(m.GatewayConfirmResult) > 0 {
		for iNdEx := len(m.GatewayConfirmResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GatewayConfirmResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelayCross(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CrossChainResult {
		i--
		if m.CrossChainResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.CrossChainTxContent) > 0 {
		for iNdEx := len(m.CrossChainTxContent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTxContent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelayCross(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FirstTxContent != nil {
		{
			size, err := m.FirstTxContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CrossChainMsg) > 0 {
		for iNdEx := len(m.CrossChainMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelayCross(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CrossChainFlag) > 0 {
		i -= len(m.CrossChainFlag)
		copy(dAtA[i:], m.CrossChainFlag)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.CrossChainFlag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrossChainName) > 0 {
		i -= len(m.CrossChainName)
		copy(dAtA[i:], m.CrossChainName)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.CrossChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossChainId) > 0 {
		i -= len(m.CrossChainId)
		copy(dAtA[i:], m.CrossChainId)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.CrossChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x62
	}
	if m.CancelInfo != nil {
		{
			size, err := m.CancelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ConfirmInfo != nil {
		{
			size, err := m.ConfirmInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ParamDataType) > 0 {
		dAtA8 := make([]byte, len(m.ParamDataType)*10)
		var j7 int
		for _, num := range m.ParamDataType {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintRelayCross(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParamData) > 0 {
		dAtA10 := make([]byte, len(m.ParamData)*10)
		var j9 int
		for _, num1 := range m.ParamData {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintRelayCross(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		for iNdEx := len(m.Identity) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identity[iNdEx])
			copy(dAtA[i:], m.Identity[iNdEx])
			i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Identity[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainRid) > 0 {
		i -= len(m.ChainRid)
		copy(dAtA[i:], m.ChainRid)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ChainRid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxContentWithVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContentWithVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContentWithVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxVerifyResult != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.TxVerifyResult))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TryResult) > 0 {
		for iNdEx := len(m.TryResult) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TryResult[iNdEx])
			copy(dAtA[i:], m.TryResult[iNdEx])
			i = encodeVarintRelayCross(dAtA, i, uint64(len(m.TryResult[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TxContent != nil {
		{
			size, err := m.TxContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParamDataType) > 0 {
		dAtA13 := make([]byte, len(m.ParamDataType)*10)
		var j12 int
		for _, num := range m.ParamDataType {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintRelayCross(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ParamData) > 0 {
		dAtA15 := make([]byte, len(m.ParamData)*10)
		var j14 int
		for _, num1 := range m.ParamData {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintRelayCross(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainRid) > 0 {
		i -= len(m.ChainRid)
		copy(dAtA[i:], m.ChainRid)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ChainRid)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxProve) > 0 {
		i -= len(m.TxProve)
		copy(dAtA[i:], m.TxProve)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.TxProve)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainRid) > 0 {
		i -= len(m.ChainRid)
		copy(dAtA[i:], m.ChainRid)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ChainRid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x22
	}
	if m.TxResult != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.TxResult))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParamDataType) > 0 {
		dAtA17 := make([]byte, len(m.ParamDataType)*10)
		var j16 int
		for _, num := range m.ParamDataType {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintRelayCross(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ParamData) > 0 {
		dAtA19 := make([]byte, len(m.ParamData)*10)
		var j18 int
		for _, num1 := range m.ParamData {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintRelayCross(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parameter) > 0 {
		i -= len(m.Parameter)
		copy(dAtA[i:], m.Parameter)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Parameter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainRid) > 0 {
		i -= len(m.ChainRid)
		copy(dAtA[i:], m.ChainRid)
		i = encodeVarintRelayCross(dAtA, i, uint64(len(m.ChainRid)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTxUpChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTxUpChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTxUpChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxContentWithVerify != nil {
		{
			size, err := m.TxContentWithVerify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainConfirmUpChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainConfirmUpChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainConfirmUpChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossChainConfirm != nil {
		{
			size, err := m.CrossChainConfirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCross(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintRelayCross(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayCross(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayCross(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SaveGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetGatewayByRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SaveCrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateCrossChainTry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateCrossChainResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteErrorCrossChainTxList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateCrossChainConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateSrcGatewayConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCrossChainInfoByRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetCrossAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteCrossAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventDataType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CrossType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TxResultValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TxVerifyRsult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CrossChainStateValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrossChainId)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.CrossChainName)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.CrossChainFlag)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.CrossChainMsg) > 0 {
		for _, e := range m.CrossChainMsg {
			l = e.Size()
			n += 1 + l + sovRelayCross(uint64(l))
		}
	}
	if m.FirstTxContent != nil {
		l = m.FirstTxContent.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.CrossChainTxContent) > 0 {
		for _, e := range m.CrossChainTxContent {
			l = e.Size()
			n += 1 + l + sovRelayCross(uint64(l))
		}
	}
	if m.CrossChainResult {
		n += 2
	}
	if len(m.GatewayConfirmResult) > 0 {
		for _, e := range m.GatewayConfirmResult {
			l = e.Size()
			n += 1 + l + sovRelayCross(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovRelayCross(uint64(m.State))
	}
	if m.ConfirmInfo != nil {
		l = m.ConfirmInfo.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.CancelInfo != nil {
		l = m.CancelInfo.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.ConfirmResult != nil {
		l = m.ConfirmResult.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovRelayCross(uint64(m.Timeout))
	}
	if m.CrossType != 0 {
		n += 2 + sovRelayCross(uint64(m.CrossType))
	}
	return n
}

func (m *CrossChainMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.ChainRid)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.Identity) > 0 {
		for _, s := range m.Identity {
			l = len(s)
			n += 1 + l + sovRelayCross(uint64(l))
		}
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.ParamData) > 0 {
		l = 0
		for _, e := range m.ParamData {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	if len(m.ParamDataType) > 0 {
		l = 0
		for _, e := range m.ParamDataType {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.ConfirmInfo != nil {
		l = m.ConfirmInfo.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.CancelInfo != nil {
		l = m.CancelInfo.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func (m *TxContentWithVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxContent != nil {
		l = m.TxContent.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.TryResult) > 0 {
		for _, s := range m.TryResult {
			l = len(s)
			n += 1 + l + sovRelayCross(uint64(l))
		}
	}
	if m.TxVerifyResult != 0 {
		n += 1 + sovRelayCross(uint64(m.TxVerifyResult))
	}
	return n
}

func (m *ConfirmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainRid)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.ParamData) > 0 {
		l = 0
		for _, e := range m.ParamData {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	if len(m.ParamDataType) > 0 {
		l = 0
		for _, e := range m.ParamDataType {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func (m *CrossChainConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRelayCross(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func (m *TxContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.TxResult != 0 {
		n += 1 + sovRelayCross(uint64(m.TxResult))
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.ChainRid)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.TxProve)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRelayCross(uint64(m.BlockHeight))
	}
	return n
}

func (m *CancelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainRid)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Parameter)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	if len(m.ParamData) > 0 {
		l = 0
		for _, e := range m.ParamData {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	if len(m.ParamDataType) > 0 {
		l = 0
		for _, e := range m.ParamDataType {
			l += sovRelayCross(uint64(e))
		}
		n += 1 + sovRelayCross(uint64(l)) + l
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func (m *CrossChainTxUpChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRelayCross(uint64(m.Index))
	}
	if m.TxContentWithVerify != nil {
		l = m.TxContentWithVerify.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func (m *CrossChainConfirmUpChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRelayCross(uint64(m.Index))
	}
	if m.CrossChainConfirm != nil {
		l = m.CrossChainConfirm.Size()
		n += 1 + l + sovRelayCross(uint64(l))
	}
	return n
}

func sovRelayCross(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayCross(x uint64) (n int) {
	return sovRelayCross(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SaveGateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveGateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveGateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayByRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayByRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayByRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveCrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveCrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveCrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCrossChainTry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCrossChainTry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCrossChainTry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCrossChainResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCrossChainResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCrossChainResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteErrorCrossChainTxList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteErrorCrossChainTxList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteErrorCrossChainTxList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCrossChainConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCrossChainConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCrossChainConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSrcGatewayConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSrcGatewayConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSrcGatewayConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCrossChainInfoByRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCrossChainInfoByRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCrossChainInfoByRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCrossAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCrossAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCrossAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCrossAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCrossAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCrossAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Code) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Code: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Code: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxResultValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResultValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResultValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxVerifyRsult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxVerifyRsult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxVerifyRsult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainStateValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainStateValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainStateValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainMsg = append(m.CrossChainMsg, &CrossChainMsg{})
			if err := m.CrossChainMsg[len(m.CrossChainMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstTxContent == nil {
				m.FirstTxContent = &TxContentWithVerify{}
			}
			if err := m.FirstTxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTxContent = append(m.CrossChainTxContent, &TxContentWithVerify{})
			if err := m.CrossChainTxContent[len(m.CrossChainTxContent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossChainResult = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfirmResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayConfirmResult = append(m.GatewayConfirmResult, &CrossChainConfirm{})
			if err := m.GatewayConfirmResult[len(m.GatewayConfirmResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CrossChainStateValue_Parameter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmInfo == nil {
				m.ConfirmInfo = &ConfirmInfo{}
			}
			if err := m.ConfirmInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelInfo == nil {
				m.CancelInfo = &CancelInfo{}
			}
			if err := m.CancelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmResult == nil {
				m.ConfirmResult = &CrossChainConfirm{}
			}
			if err := m.ConfirmResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossType", wireType)
			}
			m.CrossType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossType |= CrossType_Parameter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = append(m.Identity, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamData = append(m.ParamData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ParamData) == 0 {
					m.ParamData = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamData = append(m.ParamData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamData", wireType)
			}
		case 8:
			if wireType == 0 {
				var v EventDataType_Parameter
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= EventDataType_Parameter(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamDataType = append(m.ParamDataType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ParamDataType) == 0 {
					m.ParamDataType = make([]EventDataType_Parameter, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v EventDataType_Parameter
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= EventDataType_Parameter(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamDataType = append(m.ParamDataType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamDataType", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfirmInfo == nil {
				m.ConfirmInfo = &ConfirmInfo{}
			}
			if err := m.ConfirmInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CancelInfo == nil {
				m.CancelInfo = &CancelInfo{}
			}
			if err := m.CancelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxContentWithVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContentWithVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContentWithVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxContent == nil {
				m.TxContent = &TxContent{}
			}
			if err := m.TxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TryResult = append(m.TryResult, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxVerifyResult", wireType)
			}
			m.TxVerifyResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxVerifyResult |= TxVerifyRsult_Parameter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamData = append(m.ParamData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ParamData) == 0 {
					m.ParamData = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamData = append(m.ParamData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamData", wireType)
			}
		case 7:
			if wireType == 0 {
				var v EventDataType_Parameter
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= EventDataType_Parameter(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamDataType = append(m.ParamDataType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ParamDataType) == 0 {
					m.ParamDataType = make([]EventDataType_Parameter, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v EventDataType_Parameter
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= EventDataType_Parameter(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamDataType = append(m.ParamDataType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamDataType", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Code_Parameter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResult", wireType)
			}
			m.TxResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxResult |= TxResultValue_Parameter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxProve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxProve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamData = append(m.ParamData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ParamData) == 0 {
					m.ParamData = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamData = append(m.ParamData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamData", wireType)
			}
		case 7:
			if wireType == 0 {
				var v EventDataType_Parameter
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= EventDataType_Parameter(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParamDataType = append(m.ParamDataType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelayCross
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelayCross
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelayCross
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ParamDataType) == 0 {
					m.ParamDataType = make([]EventDataType_Parameter, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v EventDataType_Parameter
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelayCross
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= EventDataType_Parameter(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParamDataType = append(m.ParamDataType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamDataType", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTxUpChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTxUpChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTxUpChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxContentWithVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxContentWithVerify == nil {
				m.TxContentWithVerify = &TxContentWithVerify{}
			}
			if err := m.TxContentWithVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainConfirmUpChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainConfirmUpChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainConfirmUpChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCross
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCross
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainConfirm == nil {
				m.CrossChainConfirm = &CrossChainConfirm{}
			}
			if err := m.CrossChainConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCross(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCross
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayCross(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayCross
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayCross
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayCross
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayCross
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayCross
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayCross        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayCross          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayCross = fmt.Errorf("proto: unexpected end of group")
)
