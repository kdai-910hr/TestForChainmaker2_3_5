// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/subscribe.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of subscribe
type SubscribeFunction int32

const (
	SubscribeFunction_SUBSCRIBE_BLOCK          SubscribeFunction = 0
	SubscribeFunction_SUBSCRIBE_TX             SubscribeFunction = 1
	SubscribeFunction_SUBSCRIBE_CONTRACT_EVENT SubscribeFunction = 2
)

var SubscribeFunction_name = map[int32]string{
	0: "SUBSCRIBE_BLOCK",
	1: "SUBSCRIBE_TX",
	2: "SUBSCRIBE_CONTRACT_EVENT",
}

var SubscribeFunction_value = map[string]int32{
	"SUBSCRIBE_BLOCK":          0,
	"SUBSCRIBE_TX":             1,
	"SUBSCRIBE_CONTRACT_EVENT": 2,
}

func (x SubscribeFunction) String() string {
	return proto.EnumName(SubscribeFunction_name, int32(x))
}

func (SubscribeFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{0}
}

type SubscribeBlock_Parameter int32

const (
	SubscribeBlock_START_BLOCK SubscribeBlock_Parameter = 0
	SubscribeBlock_END_BLOCK   SubscribeBlock_Parameter = 1
	SubscribeBlock_WITH_RWSET  SubscribeBlock_Parameter = 2
	SubscribeBlock_ONLY_HEADER SubscribeBlock_Parameter = 3
)

var SubscribeBlock_Parameter_name = map[int32]string{
	0: "START_BLOCK",
	1: "END_BLOCK",
	2: "WITH_RWSET",
	3: "ONLY_HEADER",
}

var SubscribeBlock_Parameter_value = map[string]int32{
	"START_BLOCK": 0,
	"END_BLOCK":   1,
	"WITH_RWSET":  2,
	"ONLY_HEADER": 3,
}

func (x SubscribeBlock_Parameter) String() string {
	return proto.EnumName(SubscribeBlock_Parameter_name, int32(x))
}

func (SubscribeBlock_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{0, 0}
}

type SubscribeTx_Parameter int32

const (
	SubscribeTx_START_BLOCK   SubscribeTx_Parameter = 0
	SubscribeTx_END_BLOCK     SubscribeTx_Parameter = 1
	SubscribeTx_CONTRACT_NAME SubscribeTx_Parameter = 2
	SubscribeTx_TX_IDS        SubscribeTx_Parameter = 3
	SubscribeTx_PRE_ALIAS     SubscribeTx_Parameter = 4
	SubscribeTx_PRE_TX_ID     SubscribeTx_Parameter = 5
	SubscribeTx_PRE_ORG_ID    SubscribeTx_Parameter = 6
)

var SubscribeTx_Parameter_name = map[int32]string{
	0: "START_BLOCK",
	1: "END_BLOCK",
	2: "CONTRACT_NAME",
	3: "TX_IDS",
	4: "PRE_ALIAS",
	5: "PRE_TX_ID",
	6: "PRE_ORG_ID",
}

var SubscribeTx_Parameter_value = map[string]int32{
	"START_BLOCK":   0,
	"END_BLOCK":     1,
	"CONTRACT_NAME": 2,
	"TX_IDS":        3,
	"PRE_ALIAS":     4,
	"PRE_TX_ID":     5,
	"PRE_ORG_ID":    6,
}

func (x SubscribeTx_Parameter) String() string {
	return proto.EnumName(SubscribeTx_Parameter_name, int32(x))
}

func (SubscribeTx_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{1, 0}
}

type SubscribeContractEvent_Parameter int32

const (
	SubscribeContractEvent_TOPIC         SubscribeContractEvent_Parameter = 0
	SubscribeContractEvent_CONTRACT_NAME SubscribeContractEvent_Parameter = 1
	SubscribeContractEvent_START_BLOCK   SubscribeContractEvent_Parameter = 2
	SubscribeContractEvent_END_BLOCK     SubscribeContractEvent_Parameter = 3
)

var SubscribeContractEvent_Parameter_name = map[int32]string{
	0: "TOPIC",
	1: "CONTRACT_NAME",
	2: "START_BLOCK",
	3: "END_BLOCK",
}

var SubscribeContractEvent_Parameter_value = map[string]int32{
	"TOPIC":         0,
	"CONTRACT_NAME": 1,
	"START_BLOCK":   2,
	"END_BLOCK":     3,
}

func (x SubscribeContractEvent_Parameter) String() string {
	return proto.EnumName(SubscribeContractEvent_Parameter_name, int32(x))
}

func (SubscribeContractEvent_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{2, 0}
}

// subscribe block payload parameters
type SubscribeBlock struct {
}

func (m *SubscribeBlock) Reset()         { *m = SubscribeBlock{} }
func (m *SubscribeBlock) String() string { return proto.CompactTextString(m) }
func (*SubscribeBlock) ProtoMessage()    {}
func (*SubscribeBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{0}
}
func (m *SubscribeBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeBlock.Merge(m, src)
}
func (m *SubscribeBlock) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeBlock proto.InternalMessageInfo

// subscribe transaction payload parameters
type SubscribeTx struct {
}

func (m *SubscribeTx) Reset()         { *m = SubscribeTx{} }
func (m *SubscribeTx) String() string { return proto.CompactTextString(m) }
func (*SubscribeTx) ProtoMessage()    {}
func (*SubscribeTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{1}
}
func (m *SubscribeTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTx.Merge(m, src)
}
func (m *SubscribeTx) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTx.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTx proto.InternalMessageInfo

// subscribe contract event parameters
type SubscribeContractEvent struct {
}

func (m *SubscribeContractEvent) Reset()         { *m = SubscribeContractEvent{} }
func (m *SubscribeContractEvent) String() string { return proto.CompactTextString(m) }
func (*SubscribeContractEvent) ProtoMessage()    {}
func (*SubscribeContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2445c2204726e6f, []int{2}
}
func (m *SubscribeContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeContractEvent.Merge(m, src)
}
func (m *SubscribeContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeContractEvent proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("syscontract.SubscribeFunction", SubscribeFunction_name, SubscribeFunction_value)
	proto.RegisterEnum("syscontract.SubscribeBlock_Parameter", SubscribeBlock_Parameter_name, SubscribeBlock_Parameter_value)
	proto.RegisterEnum("syscontract.SubscribeTx_Parameter", SubscribeTx_Parameter_name, SubscribeTx_Parameter_value)
	proto.RegisterEnum("syscontract.SubscribeContractEvent_Parameter", SubscribeContractEvent_Parameter_name, SubscribeContractEvent_Parameter_value)
	proto.RegisterType((*SubscribeBlock)(nil), "syscontract.SubscribeBlock")
	proto.RegisterType((*SubscribeTx)(nil), "syscontract.SubscribeTx")
	proto.RegisterType((*SubscribeContractEvent)(nil), "syscontract.SubscribeContractEvent")
}

func init() { proto.RegisterFile("syscontract/subscribe.proto", fileDescriptor_c2445c2204726e6f) }

var fileDescriptor_c2445c2204726e6f = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xa2, 0x50,
	0x14, 0x86, 0x01, 0x47, 0x13, 0x8f, 0xa3, 0x5e, 0x99, 0x64, 0x32, 0xc9, 0xcc, 0xb0, 0x60, 0x39,
	0xc9, 0x40, 0x32, 0xf3, 0x04, 0x80, 0xb7, 0x95, 0x94, 0x82, 0x81, 0xdb, 0x6a, 0xbb, 0x28, 0x01,
	0x42, 0xa8, 0xb1, 0x72, 0xcd, 0x05, 0x8d, 0x7d, 0x82, 0x6e, 0xfb, 0x58, 0x5d, 0xba, 0xec, 0xb2,
	0xd1, 0x17, 0x69, 0x30, 0x8a, 0xb4, 0x5d, 0x75, 0xf9, 0x9f, 0xff, 0xcf, 0xfd, 0xbf, 0x93, 0x7b,
	0xe0, 0x67, 0x76, 0x9f, 0x45, 0x34, 0xcd, 0x59, 0x10, 0xe5, 0x6a, 0xb6, 0x08, 0xb3, 0x88, 0x4d,
	0xc2, 0x58, 0x99, 0x33, 0x9a, 0x53, 0xb1, 0x55, 0x31, 0xe5, 0x1b, 0xe8, 0x78, 0x07, 0x5f, 0xbf,
	0xa3, 0xd1, 0x54, 0xb6, 0xa0, 0x39, 0x0c, 0x58, 0x30, 0x8b, 0xf3, 0x98, 0x89, 0x5d, 0x68, 0x79,
	0x44, 0x73, 0x89, 0xaf, 0x5b, 0x8e, 0x71, 0x86, 0x38, 0xb1, 0x0d, 0x4d, 0x6c, 0xf7, 0xf7, 0x92,
	0x17, 0x3b, 0x00, 0x23, 0x93, 0x0c, 0x7c, 0x77, 0xe4, 0x61, 0x82, 0x84, 0x22, 0xef, 0xd8, 0xd6,
	0x95, 0x3f, 0xc0, 0x5a, 0x1f, 0xbb, 0xa8, 0x26, 0x3f, 0xf0, 0xd0, 0x2a, 0x0b, 0xc8, 0x4a, 0x5e,
	0x7d, 0xe6, 0xf5, 0x1e, 0xb4, 0x0d, 0xc7, 0x26, 0xae, 0x66, 0x10, 0xdf, 0xd6, 0xce, 0x31, 0x12,
	0x44, 0x80, 0x06, 0x19, 0xfb, 0x66, 0xdf, 0x43, 0xb5, 0x22, 0x3d, 0x74, 0xb1, 0xaf, 0x59, 0xa6,
	0xe6, 0xa1, 0x2f, 0x07, 0xb9, 0xb3, 0x51, 0xbd, 0x40, 0x2b, 0xa4, 0xe3, 0x9e, 0x16, 0xba, 0x21,
	0x47, 0xf0, 0xbd, 0x04, 0x31, 0xf6, 0xeb, 0xe3, 0x65, 0x9c, 0xe6, 0xb2, 0x59, 0x65, 0x6a, 0x42,
	0x9d, 0x38, 0x43, 0xd3, 0x40, 0xdc, 0xc7, 0x7a, 0xfe, 0x3d, 0xb1, 0xf0, 0x96, 0xb8, 0xf6, 0x67,
	0x0c, 0xbd, 0xb2, 0xe4, 0x64, 0x91, 0x46, 0xf9, 0x84, 0xa6, 0xe2, 0x37, 0xe8, 0x7a, 0x17, 0xba,
	0x67, 0xb8, 0xa6, 0x8e, 0xcb, 0x55, 0x11, 0x7c, 0x3d, 0x0e, 0xc9, 0x18, 0xf1, 0xe2, 0x2f, 0xf8,
	0x71, 0x9c, 0x94, 0xc5, 0xf8, 0x12, 0xdb, 0x04, 0x09, 0x7a, 0xf2, 0xb4, 0x91, 0xf8, 0xf5, 0x46,
	0xe2, 0x5f, 0x36, 0x12, 0xff, 0xb8, 0x95, 0xb8, 0xf5, 0x56, 0xe2, 0x9e, 0xb7, 0x12, 0x07, 0xbf,
	0x29, 0x4b, 0x94, 0xe8, 0x36, 0x98, 0xa4, 0xb3, 0x60, 0x1a, 0x33, 0x65, 0x1e, 0x2a, 0x95, 0x1f,
	0xbe, 0xae, 0x5a, 0x94, 0x25, 0xea, 0x51, 0xaa, 0xf3, 0xf0, 0x6f, 0x42, 0xd5, 0xe5, 0x3f, 0xb5,
	0x92, 0x0f, 0x1b, 0xbb, 0x2b, 0xf9, 0xff, 0x1a, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xbb, 0xe6, 0x61,
	0x44, 0x02, 0x00, 0x00,
}

func (m *SubscribeBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSubscribe(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubscribe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSubscribe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubscribe(x uint64) (n int) {
	return sovSubscribe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscribe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubscribe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubscribe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubscribe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscribe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubscribe = fmt.Errorf("proto: unexpected end of group")
)
